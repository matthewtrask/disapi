/**
 * Walt Disney World API
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse200', 'model/InlineResponse2001'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'));
  } else {
    // Browser globals (root is window)
    if (!root.WaltDisneyWorldApi) {
      root.WaltDisneyWorldApi = {};
    }
    root.WaltDisneyWorldApi.ResortsApi = factory(root.WaltDisneyWorldApi.ApiClient, root.WaltDisneyWorldApi.InlineResponse200, root.WaltDisneyWorldApi.InlineResponse2001);
  }
}(this, function(ApiClient, InlineResponse200, InlineResponse2001) {
  'use strict';

  /**
   * Resorts service.
   * @module api/ResortsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new ResortsApi. 
   * @alias module:api/ResortsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createResort operation.
     * @callback module:api/ResortsApi~createResortCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new resort resource
     * Create a new resort resource for the Walt Disney World Resort
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.parkId 
     * @param {Number} opts.openingYear 
     * @param {String} opts.resortType 
     * @param {String} opts.transportOptions 
     * @param {String} opts.category 
     * @param {Number} opts.numOfRooms 
     * @param {Boolean} opts.quickServiceRestaurants 
     * @param {Boolean} opts.tableServiceRestaurants 
     * @param {Boolean} opts.giftShop 
     * @param {Boolean} opts.arcade 
     * @param {Boolean} opts.pool 
     * @param {module:api/ResortsApi~createResortCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createResort = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'parkId': opts['parkId'],
        'openingYear': opts['openingYear'],
        'resortType': opts['resortType'],
        'transportOptions': opts['transportOptions'],
        'category': opts['category'],
        'numOfRooms': opts['numOfRooms'],
        'quickServiceRestaurants': opts['quickServiceRestaurants'],
        'tableServiceRestaurants': opts['tableServiceRestaurants'],
        'giftShop': opts['giftShop'],
        'arcade': opts['arcade'],
        'pool': opts['pool']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/resorts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResort operation.
     * @callback module:api/ResortsApi~deleteResortCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete resort resource by ID
     * @param {module:api/ResortsApi~deleteResortCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteResort = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/resorts/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editResort operation.
     * @callback module:api/ResortsApi~editResortCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a specific resort resource by ID
     * Find and edit a specific resort resource by its ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.parkId 
     * @param {Number} opts.openingYear 
     * @param {String} opts.resortType 
     * @param {String} opts.transportOptions 
     * @param {String} opts.category 
     * @param {Number} opts.numOfRooms 
     * @param {Boolean} opts.quickServiceRestaurants 
     * @param {Boolean} opts.tableServiceRestaurants 
     * @param {Boolean} opts.giftShop 
     * @param {Boolean} opts.arcade 
     * @param {Boolean} opts.pool 
     * @param {module:api/ResortsApi~editResortCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.editResort = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'parkId': opts['parkId'],
        'openingYear': opts['openingYear'],
        'resortType': opts['resortType'],
        'transportOptions': opts['transportOptions'],
        'category': opts['category'],
        'numOfRooms': opts['numOfRooms'],
        'quickServiceRestaurants': opts['quickServiceRestaurants'],
        'tableServiceRestaurants': opts['tableServiceRestaurants'],
        'giftShop': opts['giftShop'],
        'arcade': opts['arcade'],
        'pool': opts['pool']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/resorts/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResort operation.
     * @callback module:api/ResortsApi~getResortCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a specific resort resource by ID
     * Get a specific resort resource by ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.parkId 
     * @param {Number} opts.openingYear 
     * @param {String} opts.resortType 
     * @param {String} opts.transportOptions 
     * @param {String} opts.category 
     * @param {Number} opts.numOfRooms 
     * @param {Boolean} opts.quickServiceRestaurants 
     * @param {Boolean} opts.tableServiceRestaurants 
     * @param {Boolean} opts.giftShop 
     * @param {Boolean} opts.arcade 
     * @param {Boolean} opts.pool 
     * @param {module:api/ResortsApi~getResortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.getResort = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'parkId': opts['parkId'],
        'openingYear': opts['openingYear'],
        'resortType': opts['resortType'],
        'transportOptions': opts['transportOptions'],
        'category': opts['category'],
        'numOfRooms': opts['numOfRooms'],
        'quickServiceRestaurants': opts['quickServiceRestaurants'],
        'tableServiceRestaurants': opts['tableServiceRestaurants'],
        'giftShop': opts['giftShop'],
        'arcade': opts['arcade'],
        'pool': opts['pool']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/resorts/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResorts operation.
     * @callback module:api/ResortsApi~getResortsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List resorts at Walt Disney World
     * Get a list of resorts at Walt Disney World
     * @param {module:api/ResortsApi~getResortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.getResorts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/resorts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
