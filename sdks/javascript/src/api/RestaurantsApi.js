/**
 * Walt Disney World API
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2004', 'model/InlineResponse2005'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'));
  } else {
    // Browser globals (root is window)
    if (!root.WaltDisneyWorldApi) {
      root.WaltDisneyWorldApi = {};
    }
    root.WaltDisneyWorldApi.RestaurantsApi = factory(root.WaltDisneyWorldApi.ApiClient, root.WaltDisneyWorldApi.InlineResponse2004, root.WaltDisneyWorldApi.InlineResponse2005);
  }
}(this, function(ApiClient, InlineResponse2004, InlineResponse2005) {
  'use strict';

  /**
   * Restaurants service.
   * @module api/RestaurantsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new RestaurantsApi. 
   * @alias module:api/RestaurantsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRestaurant operation.
     * @callback module:api/RestaurantsApi~createRestaurantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new restaurant resource
     * Create a new restaurnat resource at Walt Disney World
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.parkId 
     * @param {Boolean} opts.quickService 
     * @param {Boolean} opts.tableService 
     * @param {Boolean} opts.alcohol 
     * @param {Boolean} opts.diningPlan 
     * @param {Array.<String>} opts.mealTypes 
     * @param {Array.<String>} opts.foodTypes 
     * @param {module:api/RestaurantsApi~createRestaurantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createRestaurant = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'parkId': opts['parkId'],
        'quickService': opts['quickService'],
        'tableService': opts['tableService'],
        'alcohol': opts['alcohol'],
        'diningPlan': opts['diningPlan'],
        'mealTypes': this.apiClient.buildCollectionParam(opts['mealTypes'], 'csv'),
        'foodTypes': this.apiClient.buildCollectionParam(opts['foodTypes'], 'csv')
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/restaurants', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRestaurant operation.
     * @callback module:api/RestaurantsApi~deleteRestaurantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a resource from the restaurants collection
     * Remove a resource from the restaurants collection by ID
     * @param {Number} id The ID of the restaurant
     * @param {module:api/RestaurantsApi~deleteRestaurantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRestaurant = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRestaurant");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/restaurants/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editRestaurant operation.
     * @callback module:api/RestaurantsApi~editRestaurantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a single restaurant resource in the collection by ID
     * Edit a restaurant by ID
     * @param {Number} id The ID of the restaurant
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.parkId 
     * @param {Boolean} opts.quickService 
     * @param {Boolean} opts.tableService 
     * @param {Boolean} opts.alcohol 
     * @param {Boolean} opts.diningPlan 
     * @param {Array.<String>} opts.mealTypes 
     * @param {Array.<String>} opts.foodTypes 
     * @param {module:api/RestaurantsApi~editRestaurantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.editRestaurant = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editRestaurant");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'parkId': opts['parkId'],
        'quickService': opts['quickService'],
        'tableService': opts['tableService'],
        'alcohol': opts['alcohol'],
        'diningPlan': opts['diningPlan'],
        'mealTypes': this.apiClient.buildCollectionParam(opts['mealTypes'], 'csv'),
        'foodTypes': this.apiClient.buildCollectionParam(opts['foodTypes'], 'csv')
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/restaurants/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestaurant operation.
     * @callback module:api/RestaurantsApi~getRestaurantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a single restaurant resource from the collection by ID
     * Get a single restaurant resource by ID
     * @param {Number} id The ID of the restaurant
     * @param {module:api/RestaurantsApi~getRestaurantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.getRestaurant = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRestaurant");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/restaurants/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestaurants operation.
     * @callback module:api/RestaurantsApi~getRestaurantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List restaurants at Walt Disney World
     * Get a list of restaurants at all parks
     * @param {module:api/RestaurantsApi~getRestaurantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.getRestaurants = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/restaurants', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
