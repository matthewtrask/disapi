=begin
#Walt Disney World API

#An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.

OpenAPI spec version: 0.1.0
Contact: support@disapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.2.3

=end

require 'uri'

module OpenapiClient
  class RidesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new ride resource
    # Create a new ride resource for the Walt Disney World Resort
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [Integer] :opening_year 
    # @option opts [String] :ride_type 
    # @option opts [String] :ride_vehicle 
    # @option opts [BOOLEAN] :interactive_queue 
    # @option opts [BOOLEAN] :gift_store_finish 
    # @option opts [Integer] :single_rider 
    # @option opts [Integer] :ride_photo 
    # @option opts [Integer] :height_restriction 
    # @return [nil]
    def create_rides(opts = {})
      create_rides_with_http_info(opts)
      nil
    end

    # Create a new ride resource
    # Create a new ride resource for the Walt Disney World Resort
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [Integer] :opening_year 
    # @option opts [String] :ride_type 
    # @option opts [String] :ride_vehicle 
    # @option opts [BOOLEAN] :interactive_queue 
    # @option opts [BOOLEAN] :gift_store_finish 
    # @option opts [Integer] :single_rider 
    # @option opts [Integer] :ride_photo 
    # @option opts [Integer] :height_restriction 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_rides_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RidesApi.create_rides ...'
      end
      # resource path
      local_var_path = '/rides'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['parkId'] = opts[:'park_id'] if !opts[:'park_id'].nil?
      form_params['openingYear'] = opts[:'opening_year'] if !opts[:'opening_year'].nil?
      form_params['rideType'] = opts[:'ride_type'] if !opts[:'ride_type'].nil?
      form_params['rideVehicle'] = opts[:'ride_vehicle'] if !opts[:'ride_vehicle'].nil?
      form_params['interactiveQueue'] = opts[:'interactive_queue'] if !opts[:'interactive_queue'].nil?
      form_params['giftStoreFinish'] = opts[:'gift_store_finish'] if !opts[:'gift_store_finish'].nil?
      form_params['singleRider'] = opts[:'single_rider'] if !opts[:'single_rider'].nil?
      form_params['ridePhoto'] = opts[:'ride_photo'] if !opts[:'ride_photo'].nil?
      form_params['heightRestriction'] = opts[:'height_restriction'] if !opts[:'height_restriction'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RidesApi#create_rides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete ride resource by ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ride(opts = {})
      delete_ride_with_http_info(opts)
      nil
    end

    # Delete ride resource by ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_ride_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RidesApi.delete_ride ...'
      end
      # resource path
      local_var_path = '/rides/{id}'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RidesApi#delete_ride\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a ride by ID
    # Edit a ride in the resource collection by ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [Integer] :opening_year 
    # @option opts [String] :ride_type 
    # @option opts [String] :ride_vehicle 
    # @option opts [BOOLEAN] :interactive_queue 
    # @option opts [BOOLEAN] :gift_store_finish 
    # @option opts [Integer] :single_rider 
    # @option opts [Integer] :ride_photo 
    # @option opts [Integer] :height_restriction 
    # @return [nil]
    def edit_ride(opts = {})
      edit_ride_with_http_info(opts)
      nil
    end

    # Edit a ride by ID
    # Edit a ride in the resource collection by ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [Integer] :opening_year 
    # @option opts [String] :ride_type 
    # @option opts [String] :ride_vehicle 
    # @option opts [BOOLEAN] :interactive_queue 
    # @option opts [BOOLEAN] :gift_store_finish 
    # @option opts [Integer] :single_rider 
    # @option opts [Integer] :ride_photo 
    # @option opts [Integer] :height_restriction 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_ride_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RidesApi.edit_ride ...'
      end
      # resource path
      local_var_path = '/rides/{id}'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['parkId'] = opts[:'park_id'] if !opts[:'park_id'].nil?
      form_params['openingYear'] = opts[:'opening_year'] if !opts[:'opening_year'].nil?
      form_params['rideType'] = opts[:'ride_type'] if !opts[:'ride_type'].nil?
      form_params['rideVehicle'] = opts[:'ride_vehicle'] if !opts[:'ride_vehicle'].nil?
      form_params['interactiveQueue'] = opts[:'interactive_queue'] if !opts[:'interactive_queue'].nil?
      form_params['giftStoreFinish'] = opts[:'gift_store_finish'] if !opts[:'gift_store_finish'].nil?
      form_params['singleRider'] = opts[:'single_rider'] if !opts[:'single_rider'].nil?
      form_params['ridePhoto'] = opts[:'ride_photo'] if !opts[:'ride_photo'].nil?
      form_params['heightRestriction'] = opts[:'height_restriction'] if !opts[:'height_restriction'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RidesApi#edit_ride\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ride by ID
    # Get a ride at Walt Disney World by ID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_ride(opts = {})
      data, _status_code, _headers = get_ride_with_http_info(opts)
      data
    end

    # Get ride by ID
    # Get a ride at Walt Disney World by ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_ride_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RidesApi.get_ride ...'
      end
      # resource path
      local_var_path = '/rides/{id}'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RidesApi#get_ride\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List rides at Walt Disney World
    # Get a list of rides at all Walt Disney World Parks 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_rides(opts = {})
      data, _status_code, _headers = get_rides_with_http_info(opts)
      data
    end

    # List rides at Walt Disney World
    # Get a list of rides at all Walt Disney World Parks 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_rides_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RidesApi.get_rides ...'
      end
      # resource path
      local_var_path = '/rides'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RidesApi#get_rides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
