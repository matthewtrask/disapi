=begin
#Walt Disney World API

#An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.

OpenAPI spec version: 0.1.0
Contact: support@disapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.2.3

=end

require 'uri'

module OpenapiClient
  class ParksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new park resource in the collection
    # Create a new park at Walt Disney World
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :central_attraction 
    # @option opts [Integer] :year_opened 
    # @option opts [Integer] :ride_count 
    # @option opts [Integer] :restaurant_count 
    # @option opts [Integer] :resort_count 
    # @option opts [Integer] :size 
    # @option opts [BOOLEAN] :fireworks 
    # @return [nil]
    def create_park(opts = {})
      create_park_with_http_info(opts)
      nil
    end

    # Create a new park resource in the collection
    # Create a new park at Walt Disney World
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :central_attraction 
    # @option opts [Integer] :year_opened 
    # @option opts [Integer] :ride_count 
    # @option opts [Integer] :restaurant_count 
    # @option opts [Integer] :resort_count 
    # @option opts [Integer] :size 
    # @option opts [BOOLEAN] :fireworks 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_park_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParksApi.create_park ...'
      end
      # resource path
      local_var_path = '/parks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['centralAttraction'] = opts[:'central_attraction'] if !opts[:'central_attraction'].nil?
      form_params['yearOpened'] = opts[:'year_opened'] if !opts[:'year_opened'].nil?
      form_params['rideCount'] = opts[:'ride_count'] if !opts[:'ride_count'].nil?
      form_params['restaurantCount'] = opts[:'restaurant_count'] if !opts[:'restaurant_count'].nil?
      form_params['resortCount'] = opts[:'resort_count'] if !opts[:'resort_count'].nil?
      form_params['size'] = opts[:'size'] if !opts[:'size'].nil?
      form_params['fireworks'] = opts[:'fireworks'] if !opts[:'fireworks'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParksApi#create_park\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a resource from the collection
    # Remove a resource from the collection by ID
    # @param id The ID of the park
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_park(id, opts = {})
      delete_park_with_http_info(id, opts)
      nil
    end

    # Remove a resource from the collection
    # Remove a resource from the collection by ID
    # @param id The ID of the park
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_park_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParksApi.delete_park ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ParksApi.delete_park"
      end
      # resource path
      local_var_path = '/parks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParksApi#delete_park\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a resource by ID
    # Edit a park resource by an ID
    # @param id The ID of the park
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def edit_park(id, opts = {})
      edit_park_with_http_info(id, opts)
      nil
    end

    # Edit a resource by ID
    # Edit a park resource by an ID
    # @param id The ID of the park
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_park_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParksApi.edit_park ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ParksApi.edit_park"
      end
      # resource path
      local_var_path = '/parks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParksApi#edit_park\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a park by ID
    # Get a park at Walt Disney World by ID
    # @param id The ID of the park
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2007]
    def get_park(id, opts = {})
      data, _status_code, _headers = get_park_with_http_info(id, opts)
      data
    end

    # List a park by ID
    # Get a park at Walt Disney World by ID
    # @param id The ID of the park
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2007, Fixnum, Hash)>] InlineResponse2007 data, response status code and response headers
    def get_park_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParksApi.get_park ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ParksApi.get_park"
      end
      # resource path
      local_var_path = '/parks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2007')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParksApi#get_park\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all parks at Walt Disney World
    # Get a list of all parks at Walt Disney World
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def get_parks(opts = {})
      data, _status_code, _headers = get_parks_with_http_info(opts)
      data
    end

    # List all parks at Walt Disney World
    # Get a list of all parks at Walt Disney World
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Fixnum, Hash)>] InlineResponse2006 data, response status code and response headers
    def get_parks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ParksApi.get_parks ...'
      end
      # resource path
      local_var_path = '/parks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2006')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ParksApi#get_parks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
