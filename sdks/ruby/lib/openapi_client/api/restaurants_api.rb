=begin
#Walt Disney World API

#An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.

OpenAPI spec version: 0.1.0
Contact: support@disapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.2.3

=end

require 'uri'

module OpenapiClient
  class RestaurantsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new restaurant resource
    # Create a new restaurnat resource at Walt Disney World
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [BOOLEAN] :quick_service 
    # @option opts [BOOLEAN] :table_service 
    # @option opts [BOOLEAN] :alcohol 
    # @option opts [BOOLEAN] :dining_plan 
    # @option opts [Array<String>] :meal_types 
    # @option opts [Array<String>] :food_types 
    # @return [nil]
    def create_restaurant(opts = {})
      create_restaurant_with_http_info(opts)
      nil
    end

    # Create a new restaurant resource
    # Create a new restaurnat resource at Walt Disney World
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [BOOLEAN] :quick_service 
    # @option opts [BOOLEAN] :table_service 
    # @option opts [BOOLEAN] :alcohol 
    # @option opts [BOOLEAN] :dining_plan 
    # @option opts [Array<String>] :meal_types 
    # @option opts [Array<String>] :food_types 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_restaurant_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RestaurantsApi.create_restaurant ...'
      end
      # resource path
      local_var_path = '/restaurants'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['parkId'] = opts[:'park_id'] if !opts[:'park_id'].nil?
      form_params['quickService'] = opts[:'quick_service'] if !opts[:'quick_service'].nil?
      form_params['tableService'] = opts[:'table_service'] if !opts[:'table_service'].nil?
      form_params['alcohol'] = opts[:'alcohol'] if !opts[:'alcohol'].nil?
      form_params['diningPlan'] = opts[:'dining_plan'] if !opts[:'dining_plan'].nil?
      form_params['mealTypes'] = @api_client.build_collection_param(opts[:'meal_types'], :csv) if !opts[:'meal_types'].nil?
      form_params['foodTypes'] = @api_client.build_collection_param(opts[:'food_types'], :csv) if !opts[:'food_types'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestaurantsApi#create_restaurant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a resource from the restaurants collection
    # Remove a resource from the restaurants collection by ID
    # @param id The ID of the restaurant
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_restaurant(id, opts = {})
      delete_restaurant_with_http_info(id, opts)
      nil
    end

    # Remove a resource from the restaurants collection
    # Remove a resource from the restaurants collection by ID
    # @param id The ID of the restaurant
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_restaurant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RestaurantsApi.delete_restaurant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RestaurantsApi.delete_restaurant"
      end
      # resource path
      local_var_path = '/restaurants/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestaurantsApi#delete_restaurant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit a single restaurant resource in the collection by ID
    # Edit a restaurant by ID
    # @param id The ID of the restaurant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [BOOLEAN] :quick_service 
    # @option opts [BOOLEAN] :table_service 
    # @option opts [BOOLEAN] :alcohol 
    # @option opts [BOOLEAN] :dining_plan 
    # @option opts [Array<String>] :meal_types 
    # @option opts [Array<String>] :food_types 
    # @return [nil]
    def edit_restaurant(id, opts = {})
      edit_restaurant_with_http_info(id, opts)
      nil
    end

    # Edit a single restaurant resource in the collection by ID
    # Edit a restaurant by ID
    # @param id The ID of the restaurant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [Integer] :park_id 
    # @option opts [BOOLEAN] :quick_service 
    # @option opts [BOOLEAN] :table_service 
    # @option opts [BOOLEAN] :alcohol 
    # @option opts [BOOLEAN] :dining_plan 
    # @option opts [Array<String>] :meal_types 
    # @option opts [Array<String>] :food_types 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def edit_restaurant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RestaurantsApi.edit_restaurant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RestaurantsApi.edit_restaurant"
      end
      # resource path
      local_var_path = '/restaurants/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['parkId'] = opts[:'park_id'] if !opts[:'park_id'].nil?
      form_params['quickService'] = opts[:'quick_service'] if !opts[:'quick_service'].nil?
      form_params['tableService'] = opts[:'table_service'] if !opts[:'table_service'].nil?
      form_params['alcohol'] = opts[:'alcohol'] if !opts[:'alcohol'].nil?
      form_params['diningPlan'] = opts[:'dining_plan'] if !opts[:'dining_plan'].nil?
      form_params['mealTypes'] = @api_client.build_collection_param(opts[:'meal_types'], :csv) if !opts[:'meal_types'].nil?
      form_params['foodTypes'] = @api_client.build_collection_param(opts[:'food_types'], :csv) if !opts[:'food_types'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestaurantsApi#edit_restaurant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a single restaurant resource from the collection by ID
    # Get a single restaurant resource by ID
    # @param id The ID of the restaurant
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2005]
    def get_restaurant(id, opts = {})
      data, _status_code, _headers = get_restaurant_with_http_info(id, opts)
      data
    end

    # List a single restaurant resource from the collection by ID
    # Get a single restaurant resource by ID
    # @param id The ID of the restaurant
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2005, Fixnum, Hash)>] InlineResponse2005 data, response status code and response headers
    def get_restaurant_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RestaurantsApi.get_restaurant ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RestaurantsApi.get_restaurant"
      end
      # resource path
      local_var_path = '/restaurants/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2005')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestaurantsApi#get_restaurant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List restaurants at Walt Disney World
    # Get a list of restaurants at all parks
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_restaurants(opts = {})
      data, _status_code, _headers = get_restaurants_with_http_info(opts)
      data
    end

    # List restaurants at Walt Disney World
    # Get a list of restaurants at all parks
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_restaurants_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RestaurantsApi.get_restaurants ...'
      end
      # resource path
      local_var_path = '/restaurants'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RestaurantsApi#get_restaurants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
