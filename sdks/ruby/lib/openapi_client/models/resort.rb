=begin
#Walt Disney World API

#An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.

OpenAPI spec version: 0.1.0
Contact: support@disapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.2.3

=end

require 'date'

module OpenapiClient
  class Resort
    attr_accessor :id

    attr_accessor :name

    attr_accessor :park_id

    attr_accessor :transport_options

    attr_accessor :category

    attr_accessor :num_of_rooms

    attr_accessor :quick_service_restaurants

    attr_accessor :table_service_restaurants

    attr_accessor :gift_shop

    attr_accessor :arcade

    attr_accessor :pool

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'park_id' => :'parkId',
        :'transport_options' => :'transportOptions',
        :'category' => :'category',
        :'num_of_rooms' => :'numOfRooms',
        :'quick_service_restaurants' => :'quickServiceRestaurants',
        :'table_service_restaurants' => :'tableServiceRestaurants',
        :'gift_shop' => :'giftShop',
        :'arcade' => :'arcade',
        :'pool' => :'pool'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'park_id' => :'Integer',
        :'transport_options' => :'Array<String>',
        :'category' => :'String',
        :'num_of_rooms' => :'Integer',
        :'quick_service_restaurants' => :'BOOLEAN',
        :'table_service_restaurants' => :'BOOLEAN',
        :'gift_shop' => :'BOOLEAN',
        :'arcade' => :'BOOLEAN',
        :'pool' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'parkId')
        self.park_id = attributes[:'parkId']
      end

      if attributes.has_key?(:'transportOptions')
        if (value = attributes[:'transportOptions']).is_a?(Array)
          self.transport_options = value
        end
      end

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'numOfRooms')
        self.num_of_rooms = attributes[:'numOfRooms']
      end

      if attributes.has_key?(:'quickServiceRestaurants')
        self.quick_service_restaurants = attributes[:'quickServiceRestaurants']
      end

      if attributes.has_key?(:'tableServiceRestaurants')
        self.table_service_restaurants = attributes[:'tableServiceRestaurants']
      end

      if attributes.has_key?(:'giftShop')
        self.gift_shop = attributes[:'giftShop']
      end

      if attributes.has_key?(:'arcade')
        self.arcade = attributes[:'arcade']
      end

      if attributes.has_key?(:'pool')
        self.pool = attributes[:'pool']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          park_id == o.park_id &&
          transport_options == o.transport_options &&
          category == o.category &&
          num_of_rooms == o.num_of_rooms &&
          quick_service_restaurants == o.quick_service_restaurants &&
          table_service_restaurants == o.table_service_restaurants &&
          gift_shop == o.gift_shop &&
          arcade == o.arcade &&
          pool == o.pool
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, park_id, transport_options, category, num_of_rooms, quick_service_restaurants, table_service_restaurants, gift_shop, arcade, pool].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpenapiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
