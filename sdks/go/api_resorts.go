/*
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * API version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ResortsApiService service

/*
ResortsApiService Create a new resort resource
Create a new resort resource for the Walt Disney World Resort
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CreateResortOpts - Optional Parameters:
 * @param "Name" (optional.String) - 
 * @param "ParkId" (optional.Int32) - 
 * @param "OpeningYear" (optional.Int32) - 
 * @param "ResortType" (optional.String) - 
 * @param "TransportOptions" (optional.String) - 
 * @param "Category" (optional.String) - 
 * @param "NumOfRooms" (optional.Int32) - 
 * @param "QuickServiceRestaurants" (optional.Bool) - 
 * @param "TableServiceRestaurants" (optional.Bool) - 
 * @param "GiftShop" (optional.Bool) - 
 * @param "Arcade" (optional.Bool) - 
 * @param "Pool" (optional.Bool) - 
*/

type CreateResortOpts struct {
    Name optional.String
    ParkId optional.Int32
    OpeningYear optional.Int32
    ResortType optional.String
    TransportOptions optional.String
    Category optional.String
    NumOfRooms optional.Int32
    QuickServiceRestaurants optional.Bool
    TableServiceRestaurants optional.Bool
    GiftShop optional.Bool
    Arcade optional.Bool
    Pool optional.Bool
}

func (a *ResortsApiService) CreateResort(ctx context.Context, localVarOptionals *CreateResortOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/resorts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParkId.IsSet() {
		localVarFormParams.Add("parkId", parameterToString(localVarOptionals.ParkId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OpeningYear.IsSet() {
		localVarFormParams.Add("openingYear", parameterToString(localVarOptionals.OpeningYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ResortType.IsSet() {
		localVarFormParams.Add("resortType", parameterToString(localVarOptionals.ResortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransportOptions.IsSet() {
		localVarFormParams.Add("transportOptions", parameterToString(localVarOptionals.TransportOptions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Category.IsSet() {
		localVarFormParams.Add("category", parameterToString(localVarOptionals.Category.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NumOfRooms.IsSet() {
		localVarFormParams.Add("numOfRooms", parameterToString(localVarOptionals.NumOfRooms.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.QuickServiceRestaurants.IsSet() {
		localVarFormParams.Add("quickServiceRestaurants", parameterToString(localVarOptionals.QuickServiceRestaurants.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TableServiceRestaurants.IsSet() {
		localVarFormParams.Add("tableServiceRestaurants", parameterToString(localVarOptionals.TableServiceRestaurants.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GiftShop.IsSet() {
		localVarFormParams.Add("giftShop", parameterToString(localVarOptionals.GiftShop.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Arcade.IsSet() {
		localVarFormParams.Add("arcade", parameterToString(localVarOptionals.Arcade.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pool.IsSet() {
		localVarFormParams.Add("pool", parameterToString(localVarOptionals.Pool.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ResortsApiService Delete resort resource by ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/
func (a *ResortsApiService) DeleteResort(ctx context.Context) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/resorts/{id}"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ResortsApiService Edit a specific resort resource by ID
Find and edit a specific resort resource by its ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *EditResortOpts - Optional Parameters:
 * @param "Name" (optional.String) - 
 * @param "ParkId" (optional.Int32) - 
 * @param "OpeningYear" (optional.Int32) - 
 * @param "ResortType" (optional.String) - 
 * @param "TransportOptions" (optional.String) - 
 * @param "Category" (optional.String) - 
 * @param "NumOfRooms" (optional.Int32) - 
 * @param "QuickServiceRestaurants" (optional.Bool) - 
 * @param "TableServiceRestaurants" (optional.Bool) - 
 * @param "GiftShop" (optional.Bool) - 
 * @param "Arcade" (optional.Bool) - 
 * @param "Pool" (optional.Bool) - 
*/

type EditResortOpts struct {
    Name optional.String
    ParkId optional.Int32
    OpeningYear optional.Int32
    ResortType optional.String
    TransportOptions optional.String
    Category optional.String
    NumOfRooms optional.Int32
    QuickServiceRestaurants optional.Bool
    TableServiceRestaurants optional.Bool
    GiftShop optional.Bool
    Arcade optional.Bool
    Pool optional.Bool
}

func (a *ResortsApiService) EditResort(ctx context.Context, localVarOptionals *EditResortOpts) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/resorts/{id}"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParkId.IsSet() {
		localVarFormParams.Add("parkId", parameterToString(localVarOptionals.ParkId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OpeningYear.IsSet() {
		localVarFormParams.Add("openingYear", parameterToString(localVarOptionals.OpeningYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ResortType.IsSet() {
		localVarFormParams.Add("resortType", parameterToString(localVarOptionals.ResortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransportOptions.IsSet() {
		localVarFormParams.Add("transportOptions", parameterToString(localVarOptionals.TransportOptions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Category.IsSet() {
		localVarFormParams.Add("category", parameterToString(localVarOptionals.Category.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NumOfRooms.IsSet() {
		localVarFormParams.Add("numOfRooms", parameterToString(localVarOptionals.NumOfRooms.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.QuickServiceRestaurants.IsSet() {
		localVarFormParams.Add("quickServiceRestaurants", parameterToString(localVarOptionals.QuickServiceRestaurants.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TableServiceRestaurants.IsSet() {
		localVarFormParams.Add("tableServiceRestaurants", parameterToString(localVarOptionals.TableServiceRestaurants.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GiftShop.IsSet() {
		localVarFormParams.Add("giftShop", parameterToString(localVarOptionals.GiftShop.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Arcade.IsSet() {
		localVarFormParams.Add("arcade", parameterToString(localVarOptionals.Arcade.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pool.IsSet() {
		localVarFormParams.Add("pool", parameterToString(localVarOptionals.Pool.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ResortsApiService List a specific resort resource by ID
Get a specific resort resource by ID
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetResortOpts - Optional Parameters:
 * @param "Name" (optional.String) - 
 * @param "ParkId" (optional.Int32) - 
 * @param "OpeningYear" (optional.Int32) - 
 * @param "ResortType" (optional.String) - 
 * @param "TransportOptions" (optional.String) - 
 * @param "Category" (optional.String) - 
 * @param "NumOfRooms" (optional.Int32) - 
 * @param "QuickServiceRestaurants" (optional.Bool) - 
 * @param "TableServiceRestaurants" (optional.Bool) - 
 * @param "GiftShop" (optional.Bool) - 
 * @param "Arcade" (optional.Bool) - 
 * @param "Pool" (optional.Bool) - 
@return InlineResponse2001
*/

type GetResortOpts struct {
    Name optional.String
    ParkId optional.Int32
    OpeningYear optional.Int32
    ResortType optional.String
    TransportOptions optional.String
    Category optional.String
    NumOfRooms optional.Int32
    QuickServiceRestaurants optional.Bool
    TableServiceRestaurants optional.Bool
    GiftShop optional.Bool
    Arcade optional.Bool
    Pool optional.Bool
}

func (a *ResortsApiService) GetResort(ctx context.Context, localVarOptionals *GetResortOpts) (InlineResponse2001, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue InlineResponse2001
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/resorts/{id}"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParkId.IsSet() {
		localVarFormParams.Add("parkId", parameterToString(localVarOptionals.ParkId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OpeningYear.IsSet() {
		localVarFormParams.Add("openingYear", parameterToString(localVarOptionals.OpeningYear.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ResortType.IsSet() {
		localVarFormParams.Add("resortType", parameterToString(localVarOptionals.ResortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TransportOptions.IsSet() {
		localVarFormParams.Add("transportOptions", parameterToString(localVarOptionals.TransportOptions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Category.IsSet() {
		localVarFormParams.Add("category", parameterToString(localVarOptionals.Category.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NumOfRooms.IsSet() {
		localVarFormParams.Add("numOfRooms", parameterToString(localVarOptionals.NumOfRooms.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.QuickServiceRestaurants.IsSet() {
		localVarFormParams.Add("quickServiceRestaurants", parameterToString(localVarOptionals.QuickServiceRestaurants.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TableServiceRestaurants.IsSet() {
		localVarFormParams.Add("tableServiceRestaurants", parameterToString(localVarOptionals.TableServiceRestaurants.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GiftShop.IsSet() {
		localVarFormParams.Add("giftShop", parameterToString(localVarOptionals.GiftShop.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Arcade.IsSet() {
		localVarFormParams.Add("arcade", parameterToString(localVarOptionals.Arcade.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pool.IsSet() {
		localVarFormParams.Add("pool", parameterToString(localVarOptionals.Pool.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2001
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ResortsApiService List resorts at Walt Disney World
Get a list of resorts at Walt Disney World
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return InlineResponse200
*/
func (a *ResortsApiService) GetResorts(ctx context.Context) (InlineResponse200, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue InlineResponse200
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/resorts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse200
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
