<?php
/**
 * ParkForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ParkForm Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ParkForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ParkForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'central_attraction' => 'string',
        'year_opened' => 'int',
        'ride_count' => 'int',
        'restaurant_count' => 'int',
        'resort_count' => 'int',
        'size' => 'int',
        'fireworks' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'central_attraction' => null,
        'year_opened' => 'int32',
        'ride_count' => 'int32',
        'restaurant_count' => 'int32',
        'resort_count' => 'int32',
        'size' => 'int32',
        'fireworks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'central_attraction' => 'centralAttraction',
        'year_opened' => 'yearOpened',
        'ride_count' => 'rideCount',
        'restaurant_count' => 'restaurantCount',
        'resort_count' => 'resortCount',
        'size' => 'size',
        'fireworks' => 'fireworks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'central_attraction' => 'setCentralAttraction',
        'year_opened' => 'setYearOpened',
        'ride_count' => 'setRideCount',
        'restaurant_count' => 'setRestaurantCount',
        'resort_count' => 'setResortCount',
        'size' => 'setSize',
        'fireworks' => 'setFireworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'central_attraction' => 'getCentralAttraction',
        'year_opened' => 'getYearOpened',
        'ride_count' => 'getRideCount',
        'restaurant_count' => 'getRestaurantCount',
        'resort_count' => 'getResortCount',
        'size' => 'getSize',
        'fireworks' => 'getFireworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['central_attraction'] = isset($data['central_attraction']) ? $data['central_attraction'] : null;
        $this->container['year_opened'] = isset($data['year_opened']) ? $data['year_opened'] : null;
        $this->container['ride_count'] = isset($data['ride_count']) ? $data['ride_count'] : null;
        $this->container['restaurant_count'] = isset($data['restaurant_count']) ? $data['restaurant_count'] : null;
        $this->container['resort_count'] = isset($data['resort_count']) ? $data['resort_count'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['fireworks'] = isset($data['fireworks']) ? $data['fireworks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets central_attraction
     *
     * @return string|null
     */
    public function getCentralAttraction()
    {
        return $this->container['central_attraction'];
    }

    /**
     * Sets central_attraction
     *
     * @param string|null $central_attraction central_attraction
     *
     * @return $this
     */
    public function setCentralAttraction($central_attraction)
    {
        $this->container['central_attraction'] = $central_attraction;

        return $this;
    }

    /**
     * Gets year_opened
     *
     * @return int|null
     */
    public function getYearOpened()
    {
        return $this->container['year_opened'];
    }

    /**
     * Sets year_opened
     *
     * @param int|null $year_opened year_opened
     *
     * @return $this
     */
    public function setYearOpened($year_opened)
    {
        $this->container['year_opened'] = $year_opened;

        return $this;
    }

    /**
     * Gets ride_count
     *
     * @return int|null
     */
    public function getRideCount()
    {
        return $this->container['ride_count'];
    }

    /**
     * Sets ride_count
     *
     * @param int|null $ride_count ride_count
     *
     * @return $this
     */
    public function setRideCount($ride_count)
    {
        $this->container['ride_count'] = $ride_count;

        return $this;
    }

    /**
     * Gets restaurant_count
     *
     * @return int|null
     */
    public function getRestaurantCount()
    {
        return $this->container['restaurant_count'];
    }

    /**
     * Sets restaurant_count
     *
     * @param int|null $restaurant_count restaurant_count
     *
     * @return $this
     */
    public function setRestaurantCount($restaurant_count)
    {
        $this->container['restaurant_count'] = $restaurant_count;

        return $this;
    }

    /**
     * Gets resort_count
     *
     * @return int|null
     */
    public function getResortCount()
    {
        return $this->container['resort_count'];
    }

    /**
     * Sets resort_count
     *
     * @param int|null $resort_count resort_count
     *
     * @return $this
     */
    public function setResortCount($resort_count)
    {
        $this->container['resort_count'] = $resort_count;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets fireworks
     *
     * @return bool|null
     */
    public function getFireworks()
    {
        return $this->container['fireworks'];
    }

    /**
     * Sets fireworks
     *
     * @param bool|null $fireworks fireworks
     *
     * @return $this
     */
    public function setFireworks($fireworks)
    {
        $this->container['fireworks'] = $fireworks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


