<?php
/**
 * RestaurantForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RestaurantForm Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RestaurantForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RestaurantForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'park_id' => 'int',
        'quick_service' => 'bool',
        'table_service' => 'bool',
        'alcohol' => 'bool',
        'dining_plan' => 'bool',
        'meal_types' => 'string[]',
        'food_types' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'park_id' => 'int32',
        'quick_service' => null,
        'table_service' => null,
        'alcohol' => null,
        'dining_plan' => null,
        'meal_types' => null,
        'food_types' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'park_id' => 'parkId',
        'quick_service' => 'quickService',
        'table_service' => 'tableService',
        'alcohol' => 'alcohol',
        'dining_plan' => 'diningPlan',
        'meal_types' => 'mealTypes',
        'food_types' => 'foodTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'park_id' => 'setParkId',
        'quick_service' => 'setQuickService',
        'table_service' => 'setTableService',
        'alcohol' => 'setAlcohol',
        'dining_plan' => 'setDiningPlan',
        'meal_types' => 'setMealTypes',
        'food_types' => 'setFoodTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'park_id' => 'getParkId',
        'quick_service' => 'getQuickService',
        'table_service' => 'getTableService',
        'alcohol' => 'getAlcohol',
        'dining_plan' => 'getDiningPlan',
        'meal_types' => 'getMealTypes',
        'food_types' => 'getFoodTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['park_id'] = isset($data['park_id']) ? $data['park_id'] : null;
        $this->container['quick_service'] = isset($data['quick_service']) ? $data['quick_service'] : null;
        $this->container['table_service'] = isset($data['table_service']) ? $data['table_service'] : null;
        $this->container['alcohol'] = isset($data['alcohol']) ? $data['alcohol'] : null;
        $this->container['dining_plan'] = isset($data['dining_plan']) ? $data['dining_plan'] : null;
        $this->container['meal_types'] = isset($data['meal_types']) ? $data['meal_types'] : null;
        $this->container['food_types'] = isset($data['food_types']) ? $data['food_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets park_id
     *
     * @return int|null
     */
    public function getParkId()
    {
        return $this->container['park_id'];
    }

    /**
     * Sets park_id
     *
     * @param int|null $park_id park_id
     *
     * @return $this
     */
    public function setParkId($park_id)
    {
        $this->container['park_id'] = $park_id;

        return $this;
    }

    /**
     * Gets quick_service
     *
     * @return bool|null
     */
    public function getQuickService()
    {
        return $this->container['quick_service'];
    }

    /**
     * Sets quick_service
     *
     * @param bool|null $quick_service quick_service
     *
     * @return $this
     */
    public function setQuickService($quick_service)
    {
        $this->container['quick_service'] = $quick_service;

        return $this;
    }

    /**
     * Gets table_service
     *
     * @return bool|null
     */
    public function getTableService()
    {
        return $this->container['table_service'];
    }

    /**
     * Sets table_service
     *
     * @param bool|null $table_service table_service
     *
     * @return $this
     */
    public function setTableService($table_service)
    {
        $this->container['table_service'] = $table_service;

        return $this;
    }

    /**
     * Gets alcohol
     *
     * @return bool|null
     */
    public function getAlcohol()
    {
        return $this->container['alcohol'];
    }

    /**
     * Sets alcohol
     *
     * @param bool|null $alcohol alcohol
     *
     * @return $this
     */
    public function setAlcohol($alcohol)
    {
        $this->container['alcohol'] = $alcohol;

        return $this;
    }

    /**
     * Gets dining_plan
     *
     * @return bool|null
     */
    public function getDiningPlan()
    {
        return $this->container['dining_plan'];
    }

    /**
     * Sets dining_plan
     *
     * @param bool|null $dining_plan dining_plan
     *
     * @return $this
     */
    public function setDiningPlan($dining_plan)
    {
        $this->container['dining_plan'] = $dining_plan;

        return $this;
    }

    /**
     * Gets meal_types
     *
     * @return string[]|null
     */
    public function getMealTypes()
    {
        return $this->container['meal_types'];
    }

    /**
     * Sets meal_types
     *
     * @param string[]|null $meal_types meal_types
     *
     * @return $this
     */
    public function setMealTypes($meal_types)
    {
        $this->container['meal_types'] = $meal_types;

        return $this;
    }

    /**
     * Gets food_types
     *
     * @return string[]|null
     */
    public function getFoodTypes()
    {
        return $this->container['food_types'];
    }

    /**
     * Sets food_types
     *
     * @param string[]|null $food_types food_types
     *
     * @return $this
     */
    public function setFoodTypes($food_types)
    {
        $this->container['food_types'] = $food_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


