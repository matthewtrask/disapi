<?php
/**
 * RideForm
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RideForm Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RideForm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RideForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'park_id' => 'int',
        'opening_year' => 'int',
        'ride_type' => 'string',
        'ride_vehicle' => 'string',
        'interactive_queue' => 'bool',
        'gift_store_finish' => 'bool',
        'single_rider' => 'int',
        'ride_photo' => 'int',
        'height_restriction' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'name' => null,
        'park_id' => 'int32',
        'opening_year' => 'int32',
        'ride_type' => null,
        'ride_vehicle' => null,
        'interactive_queue' => null,
        'gift_store_finish' => null,
        'single_rider' => 'int32',
        'ride_photo' => 'int32',
        'height_restriction' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'park_id' => 'parkId',
        'opening_year' => 'openingYear',
        'ride_type' => 'rideType',
        'ride_vehicle' => 'rideVehicle',
        'interactive_queue' => 'interactiveQueue',
        'gift_store_finish' => 'giftStoreFinish',
        'single_rider' => 'singleRider',
        'ride_photo' => 'ridePhoto',
        'height_restriction' => 'heightRestriction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'park_id' => 'setParkId',
        'opening_year' => 'setOpeningYear',
        'ride_type' => 'setRideType',
        'ride_vehicle' => 'setRideVehicle',
        'interactive_queue' => 'setInteractiveQueue',
        'gift_store_finish' => 'setGiftStoreFinish',
        'single_rider' => 'setSingleRider',
        'ride_photo' => 'setRidePhoto',
        'height_restriction' => 'setHeightRestriction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'park_id' => 'getParkId',
        'opening_year' => 'getOpeningYear',
        'ride_type' => 'getRideType',
        'ride_vehicle' => 'getRideVehicle',
        'interactive_queue' => 'getInteractiveQueue',
        'gift_store_finish' => 'getGiftStoreFinish',
        'single_rider' => 'getSingleRider',
        'ride_photo' => 'getRidePhoto',
        'height_restriction' => 'getHeightRestriction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['park_id'] = isset($data['park_id']) ? $data['park_id'] : null;
        $this->container['opening_year'] = isset($data['opening_year']) ? $data['opening_year'] : null;
        $this->container['ride_type'] = isset($data['ride_type']) ? $data['ride_type'] : null;
        $this->container['ride_vehicle'] = isset($data['ride_vehicle']) ? $data['ride_vehicle'] : null;
        $this->container['interactive_queue'] = isset($data['interactive_queue']) ? $data['interactive_queue'] : null;
        $this->container['gift_store_finish'] = isset($data['gift_store_finish']) ? $data['gift_store_finish'] : null;
        $this->container['single_rider'] = isset($data['single_rider']) ? $data['single_rider'] : null;
        $this->container['ride_photo'] = isset($data['ride_photo']) ? $data['ride_photo'] : null;
        $this->container['height_restriction'] = isset($data['height_restriction']) ? $data['height_restriction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets park_id
     *
     * @return int|null
     */
    public function getParkId()
    {
        return $this->container['park_id'];
    }

    /**
     * Sets park_id
     *
     * @param int|null $park_id park_id
     *
     * @return $this
     */
    public function setParkId($park_id)
    {
        $this->container['park_id'] = $park_id;

        return $this;
    }

    /**
     * Gets opening_year
     *
     * @return int|null
     */
    public function getOpeningYear()
    {
        return $this->container['opening_year'];
    }

    /**
     * Sets opening_year
     *
     * @param int|null $opening_year opening_year
     *
     * @return $this
     */
    public function setOpeningYear($opening_year)
    {
        $this->container['opening_year'] = $opening_year;

        return $this;
    }

    /**
     * Gets ride_type
     *
     * @return string|null
     */
    public function getRideType()
    {
        return $this->container['ride_type'];
    }

    /**
     * Sets ride_type
     *
     * @param string|null $ride_type ride_type
     *
     * @return $this
     */
    public function setRideType($ride_type)
    {
        $this->container['ride_type'] = $ride_type;

        return $this;
    }

    /**
     * Gets ride_vehicle
     *
     * @return string|null
     */
    public function getRideVehicle()
    {
        return $this->container['ride_vehicle'];
    }

    /**
     * Sets ride_vehicle
     *
     * @param string|null $ride_vehicle ride_vehicle
     *
     * @return $this
     */
    public function setRideVehicle($ride_vehicle)
    {
        $this->container['ride_vehicle'] = $ride_vehicle;

        return $this;
    }

    /**
     * Gets interactive_queue
     *
     * @return bool|null
     */
    public function getInteractiveQueue()
    {
        return $this->container['interactive_queue'];
    }

    /**
     * Sets interactive_queue
     *
     * @param bool|null $interactive_queue interactive_queue
     *
     * @return $this
     */
    public function setInteractiveQueue($interactive_queue)
    {
        $this->container['interactive_queue'] = $interactive_queue;

        return $this;
    }

    /**
     * Gets gift_store_finish
     *
     * @return bool|null
     */
    public function getGiftStoreFinish()
    {
        return $this->container['gift_store_finish'];
    }

    /**
     * Sets gift_store_finish
     *
     * @param bool|null $gift_store_finish gift_store_finish
     *
     * @return $this
     */
    public function setGiftStoreFinish($gift_store_finish)
    {
        $this->container['gift_store_finish'] = $gift_store_finish;

        return $this;
    }

    /**
     * Gets single_rider
     *
     * @return int|null
     */
    public function getSingleRider()
    {
        return $this->container['single_rider'];
    }

    /**
     * Sets single_rider
     *
     * @param int|null $single_rider single_rider
     *
     * @return $this
     */
    public function setSingleRider($single_rider)
    {
        $this->container['single_rider'] = $single_rider;

        return $this;
    }

    /**
     * Gets ride_photo
     *
     * @return int|null
     */
    public function getRidePhoto()
    {
        return $this->container['ride_photo'];
    }

    /**
     * Sets ride_photo
     *
     * @param int|null $ride_photo ride_photo
     *
     * @return $this
     */
    public function setRidePhoto($ride_photo)
    {
        $this->container['ride_photo'] = $ride_photo;

        return $this;
    }

    /**
     * Gets height_restriction
     *
     * @return int|null
     */
    public function getHeightRestriction()
    {
        return $this->container['height_restriction'];
    }

    /**
     * Sets height_restriction
     *
     * @param int|null $height_restriction height_restriction
     *
     * @return $this
     */
    public function setHeightRestriction($height_restriction)
    {
        $this->container['height_restriction'] = $height_restriction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


