<?php
/**
 * ResortsApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ResortsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ResortsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createResort
     *
     * Create a new resort resource
     *
     * @param  string $name name (optional)
     * @param  int $park_id park_id (optional)
     * @param  int $opening_year opening_year (optional)
     * @param  string $resort_type resort_type (optional)
     * @param  string $transport_options transport_options (optional)
     * @param  string $category category (optional)
     * @param  int $num_of_rooms num_of_rooms (optional)
     * @param  bool $quick_service_restaurants quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants table_service_restaurants (optional)
     * @param  bool $gift_shop gift_shop (optional)
     * @param  bool $arcade arcade (optional)
     * @param  bool $pool pool (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createResort($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $this->createResortWithHttpInfo($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);
    }

    /**
     * Operation createResortWithHttpInfo
     *
     * Create a new resort resource
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResortWithHttpInfo($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $request = $this->createResortRequest($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createResortAsync
     *
     * Create a new resort resource
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResortAsync($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        return $this->createResortAsyncWithHttpInfo($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createResortAsyncWithHttpInfo
     *
     * Create a new resort resource
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResortAsyncWithHttpInfo($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $returnType = '';
        $request = $this->createResortRequest($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createResort'
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createResortRequest($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {

        $resourcePath = '/resorts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($park_id !== null) {
            $formParams['parkId'] = ObjectSerializer::toFormValue($park_id);
        }
        // form params
        if ($opening_year !== null) {
            $formParams['openingYear'] = ObjectSerializer::toFormValue($opening_year);
        }
        // form params
        if ($resort_type !== null) {
            $formParams['resortType'] = ObjectSerializer::toFormValue($resort_type);
        }
        // form params
        if ($transport_options !== null) {
            $formParams['transportOptions'] = ObjectSerializer::toFormValue($transport_options);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($num_of_rooms !== null) {
            $formParams['numOfRooms'] = ObjectSerializer::toFormValue($num_of_rooms);
        }
        // form params
        if ($quick_service_restaurants !== null) {
            $formParams['quickServiceRestaurants'] = ObjectSerializer::toFormValue($quick_service_restaurants);
        }
        // form params
        if ($table_service_restaurants !== null) {
            $formParams['tableServiceRestaurants'] = ObjectSerializer::toFormValue($table_service_restaurants);
        }
        // form params
        if ($gift_shop !== null) {
            $formParams['giftShop'] = ObjectSerializer::toFormValue($gift_shop);
        }
        // form params
        if ($arcade !== null) {
            $formParams['arcade'] = ObjectSerializer::toFormValue($arcade);
        }
        // form params
        if ($pool !== null) {
            $formParams['pool'] = ObjectSerializer::toFormValue($pool);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteResort
     *
     * Delete resort resource by ID
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteResort()
    {
        $this->deleteResortWithHttpInfo();
    }

    /**
     * Operation deleteResortWithHttpInfo
     *
     * Delete resort resource by ID
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteResortWithHttpInfo()
    {
        $request = $this->deleteResortRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteResortAsync
     *
     * Delete resort resource by ID
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResortAsync()
    {
        return $this->deleteResortAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteResortAsyncWithHttpInfo
     *
     * Delete resort resource by ID
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteResortAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->deleteResortRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteResort'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteResortRequest()
    {

        $resourcePath = '/resorts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editResort
     *
     * Edit a specific resort resource by ID
     *
     * @param  string $name name (optional)
     * @param  int $park_id park_id (optional)
     * @param  int $opening_year opening_year (optional)
     * @param  string $resort_type resort_type (optional)
     * @param  string $transport_options transport_options (optional)
     * @param  string $category category (optional)
     * @param  int $num_of_rooms num_of_rooms (optional)
     * @param  bool $quick_service_restaurants quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants table_service_restaurants (optional)
     * @param  bool $gift_shop gift_shop (optional)
     * @param  bool $arcade arcade (optional)
     * @param  bool $pool pool (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function editResort($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $this->editResortWithHttpInfo($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);
    }

    /**
     * Operation editResortWithHttpInfo
     *
     * Edit a specific resort resource by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function editResortWithHttpInfo($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $request = $this->editResortRequest($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation editResortAsync
     *
     * Edit a specific resort resource by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editResortAsync($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        return $this->editResortAsyncWithHttpInfo($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editResortAsyncWithHttpInfo
     *
     * Edit a specific resort resource by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editResortAsyncWithHttpInfo($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $returnType = '';
        $request = $this->editResortRequest($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editResort'
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editResortRequest($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {

        $resourcePath = '/resorts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($park_id !== null) {
            $formParams['parkId'] = ObjectSerializer::toFormValue($park_id);
        }
        // form params
        if ($opening_year !== null) {
            $formParams['openingYear'] = ObjectSerializer::toFormValue($opening_year);
        }
        // form params
        if ($resort_type !== null) {
            $formParams['resortType'] = ObjectSerializer::toFormValue($resort_type);
        }
        // form params
        if ($transport_options !== null) {
            $formParams['transportOptions'] = ObjectSerializer::toFormValue($transport_options);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($num_of_rooms !== null) {
            $formParams['numOfRooms'] = ObjectSerializer::toFormValue($num_of_rooms);
        }
        // form params
        if ($quick_service_restaurants !== null) {
            $formParams['quickServiceRestaurants'] = ObjectSerializer::toFormValue($quick_service_restaurants);
        }
        // form params
        if ($table_service_restaurants !== null) {
            $formParams['tableServiceRestaurants'] = ObjectSerializer::toFormValue($table_service_restaurants);
        }
        // form params
        if ($gift_shop !== null) {
            $formParams['giftShop'] = ObjectSerializer::toFormValue($gift_shop);
        }
        // form params
        if ($arcade !== null) {
            $formParams['arcade'] = ObjectSerializer::toFormValue($arcade);
        }
        // form params
        if ($pool !== null) {
            $formParams['pool'] = ObjectSerializer::toFormValue($pool);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResort
     *
     * List a specific resort resource by ID
     *
     * @param  string $name name (optional)
     * @param  int $park_id park_id (optional)
     * @param  int $opening_year opening_year (optional)
     * @param  string $resort_type resort_type (optional)
     * @param  string $transport_options transport_options (optional)
     * @param  string $category category (optional)
     * @param  int $num_of_rooms num_of_rooms (optional)
     * @param  bool $quick_service_restaurants quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants table_service_restaurants (optional)
     * @param  bool $gift_shop gift_shop (optional)
     * @param  bool $arcade arcade (optional)
     * @param  bool $pool pool (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2001
     */
    public function getResort($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        list($response) = $this->getResortWithHttpInfo($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);
        return $response;
    }

    /**
     * Operation getResortWithHttpInfo
     *
     * List a specific resort resource by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResortWithHttpInfo($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $request = $this->getResortRequest($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\OpenAPI\Client\Model\InlineResponse2001' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResortAsync
     *
     * List a specific resort resource by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResortAsync($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        return $this->getResortAsyncWithHttpInfo($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResortAsyncWithHttpInfo
     *
     * List a specific resort resource by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResortAsyncWithHttpInfo($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2001';
        $request = $this->getResortRequest($name, $park_id, $opening_year, $resort_type, $transport_options, $category, $num_of_rooms, $quick_service_restaurants, $table_service_restaurants, $gift_shop, $arcade, $pool);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResort'
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $resort_type (optional)
     * @param  string $transport_options (optional)
     * @param  string $category (optional)
     * @param  int $num_of_rooms (optional)
     * @param  bool $quick_service_restaurants (optional)
     * @param  bool $table_service_restaurants (optional)
     * @param  bool $gift_shop (optional)
     * @param  bool $arcade (optional)
     * @param  bool $pool (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResortRequest($name = null, $park_id = null, $opening_year = null, $resort_type = null, $transport_options = null, $category = null, $num_of_rooms = null, $quick_service_restaurants = null, $table_service_restaurants = null, $gift_shop = null, $arcade = null, $pool = null)
    {

        $resourcePath = '/resorts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($park_id !== null) {
            $formParams['parkId'] = ObjectSerializer::toFormValue($park_id);
        }
        // form params
        if ($opening_year !== null) {
            $formParams['openingYear'] = ObjectSerializer::toFormValue($opening_year);
        }
        // form params
        if ($resort_type !== null) {
            $formParams['resortType'] = ObjectSerializer::toFormValue($resort_type);
        }
        // form params
        if ($transport_options !== null) {
            $formParams['transportOptions'] = ObjectSerializer::toFormValue($transport_options);
        }
        // form params
        if ($category !== null) {
            $formParams['category'] = ObjectSerializer::toFormValue($category);
        }
        // form params
        if ($num_of_rooms !== null) {
            $formParams['numOfRooms'] = ObjectSerializer::toFormValue($num_of_rooms);
        }
        // form params
        if ($quick_service_restaurants !== null) {
            $formParams['quickServiceRestaurants'] = ObjectSerializer::toFormValue($quick_service_restaurants);
        }
        // form params
        if ($table_service_restaurants !== null) {
            $formParams['tableServiceRestaurants'] = ObjectSerializer::toFormValue($table_service_restaurants);
        }
        // form params
        if ($gift_shop !== null) {
            $formParams['giftShop'] = ObjectSerializer::toFormValue($gift_shop);
        }
        // form params
        if ($arcade !== null) {
            $formParams['arcade'] = ObjectSerializer::toFormValue($arcade);
        }
        // form params
        if ($pool !== null) {
            $formParams['pool'] = ObjectSerializer::toFormValue($pool);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getResorts
     *
     * List resorts at Walt Disney World
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse200
     */
    public function getResorts()
    {
        list($response) = $this->getResortsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getResortsWithHttpInfo
     *
     * List resorts at Walt Disney World
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResortsWithHttpInfo()
    {
        $request = $this->getResortsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\OpenAPI\Client\Model\InlineResponse200' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getResortsAsync
     *
     * List resorts at Walt Disney World
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResortsAsync()
    {
        return $this->getResortsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getResortsAsyncWithHttpInfo
     *
     * List resorts at Walt Disney World
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getResortsAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse200';
        $request = $this->getResortsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getResorts'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getResortsRequest()
    {

        $resourcePath = '/resorts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
