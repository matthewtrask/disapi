<?php
/**
 * RidesApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RidesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RidesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createRides
     *
     * Create a new ride resource
     *
     * @param  string $name name (optional)
     * @param  int $park_id park_id (optional)
     * @param  int $opening_year opening_year (optional)
     * @param  string $ride_type ride_type (optional)
     * @param  string $ride_vehicle ride_vehicle (optional)
     * @param  bool $interactive_queue interactive_queue (optional)
     * @param  bool $gift_store_finish gift_store_finish (optional)
     * @param  int $single_rider single_rider (optional)
     * @param  int $ride_photo ride_photo (optional)
     * @param  int $height_restriction height_restriction (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createRides($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        $this->createRidesWithHttpInfo($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction);
    }

    /**
     * Operation createRidesWithHttpInfo
     *
     * Create a new ride resource
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRidesWithHttpInfo($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        $request = $this->createRidesRequest($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createRidesAsync
     *
     * Create a new ride resource
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRidesAsync($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        return $this->createRidesAsyncWithHttpInfo($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRidesAsyncWithHttpInfo
     *
     * Create a new ride resource
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRidesAsyncWithHttpInfo($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        $returnType = '';
        $request = $this->createRidesRequest($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRides'
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRidesRequest($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {

        $resourcePath = '/rides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($park_id !== null) {
            $formParams['parkId'] = ObjectSerializer::toFormValue($park_id);
        }
        // form params
        if ($opening_year !== null) {
            $formParams['openingYear'] = ObjectSerializer::toFormValue($opening_year);
        }
        // form params
        if ($ride_type !== null) {
            $formParams['rideType'] = ObjectSerializer::toFormValue($ride_type);
        }
        // form params
        if ($ride_vehicle !== null) {
            $formParams['rideVehicle'] = ObjectSerializer::toFormValue($ride_vehicle);
        }
        // form params
        if ($interactive_queue !== null) {
            $formParams['interactiveQueue'] = ObjectSerializer::toFormValue($interactive_queue);
        }
        // form params
        if ($gift_store_finish !== null) {
            $formParams['giftStoreFinish'] = ObjectSerializer::toFormValue($gift_store_finish);
        }
        // form params
        if ($single_rider !== null) {
            $formParams['singleRider'] = ObjectSerializer::toFormValue($single_rider);
        }
        // form params
        if ($ride_photo !== null) {
            $formParams['ridePhoto'] = ObjectSerializer::toFormValue($ride_photo);
        }
        // form params
        if ($height_restriction !== null) {
            $formParams['heightRestriction'] = ObjectSerializer::toFormValue($height_restriction);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRide
     *
     * Delete ride resource by ID
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRide()
    {
        $this->deleteRideWithHttpInfo();
    }

    /**
     * Operation deleteRideWithHttpInfo
     *
     * Delete ride resource by ID
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRideWithHttpInfo()
    {
        $request = $this->deleteRideRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRideAsync
     *
     * Delete ride resource by ID
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRideAsync()
    {
        return $this->deleteRideAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRideAsyncWithHttpInfo
     *
     * Delete ride resource by ID
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRideAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->deleteRideRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRide'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRideRequest()
    {

        $resourcePath = '/rides/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editRide
     *
     * Edit a ride by ID
     *
     * @param  string $name name (optional)
     * @param  int $park_id park_id (optional)
     * @param  int $opening_year opening_year (optional)
     * @param  string $ride_type ride_type (optional)
     * @param  string $ride_vehicle ride_vehicle (optional)
     * @param  bool $interactive_queue interactive_queue (optional)
     * @param  bool $gift_store_finish gift_store_finish (optional)
     * @param  int $single_rider single_rider (optional)
     * @param  int $ride_photo ride_photo (optional)
     * @param  int $height_restriction height_restriction (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function editRide($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        $this->editRideWithHttpInfo($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction);
    }

    /**
     * Operation editRideWithHttpInfo
     *
     * Edit a ride by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function editRideWithHttpInfo($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        $request = $this->editRideRequest($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation editRideAsync
     *
     * Edit a ride by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editRideAsync($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        return $this->editRideAsyncWithHttpInfo($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editRideAsyncWithHttpInfo
     *
     * Edit a ride by ID
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editRideAsyncWithHttpInfo($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {
        $returnType = '';
        $request = $this->editRideRequest($name, $park_id, $opening_year, $ride_type, $ride_vehicle, $interactive_queue, $gift_store_finish, $single_rider, $ride_photo, $height_restriction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editRide'
     *
     * @param  string $name (optional)
     * @param  int $park_id (optional)
     * @param  int $opening_year (optional)
     * @param  string $ride_type (optional)
     * @param  string $ride_vehicle (optional)
     * @param  bool $interactive_queue (optional)
     * @param  bool $gift_store_finish (optional)
     * @param  int $single_rider (optional)
     * @param  int $ride_photo (optional)
     * @param  int $height_restriction (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editRideRequest($name = null, $park_id = null, $opening_year = null, $ride_type = null, $ride_vehicle = null, $interactive_queue = null, $gift_store_finish = null, $single_rider = null, $ride_photo = null, $height_restriction = null)
    {

        $resourcePath = '/rides/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($park_id !== null) {
            $formParams['parkId'] = ObjectSerializer::toFormValue($park_id);
        }
        // form params
        if ($opening_year !== null) {
            $formParams['openingYear'] = ObjectSerializer::toFormValue($opening_year);
        }
        // form params
        if ($ride_type !== null) {
            $formParams['rideType'] = ObjectSerializer::toFormValue($ride_type);
        }
        // form params
        if ($ride_vehicle !== null) {
            $formParams['rideVehicle'] = ObjectSerializer::toFormValue($ride_vehicle);
        }
        // form params
        if ($interactive_queue !== null) {
            $formParams['interactiveQueue'] = ObjectSerializer::toFormValue($interactive_queue);
        }
        // form params
        if ($gift_store_finish !== null) {
            $formParams['giftStoreFinish'] = ObjectSerializer::toFormValue($gift_store_finish);
        }
        // form params
        if ($single_rider !== null) {
            $formParams['singleRider'] = ObjectSerializer::toFormValue($single_rider);
        }
        // form params
        if ($ride_photo !== null) {
            $formParams['ridePhoto'] = ObjectSerializer::toFormValue($ride_photo);
        }
        // form params
        if ($height_restriction !== null) {
            $formParams['heightRestriction'] = ObjectSerializer::toFormValue($height_restriction);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRide
     *
     * Get ride by ID
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2003
     */
    public function getRide()
    {
        list($response) = $this->getRideWithHttpInfo();
        return $response;
    }

    /**
     * Operation getRideWithHttpInfo
     *
     * Get ride by ID
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRideWithHttpInfo()
    {
        $request = $this->getRideRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\OpenAPI\Client\Model\InlineResponse2003' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRideAsync
     *
     * Get ride by ID
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRideAsync()
    {
        return $this->getRideAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRideAsyncWithHttpInfo
     *
     * Get ride by ID
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRideAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2003';
        $request = $this->getRideRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRide'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRideRequest()
    {

        $resourcePath = '/rides/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRides
     *
     * List rides at Walt Disney World
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse2002
     */
    public function getRides()
    {
        list($response) = $this->getRidesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getRidesWithHttpInfo
     *
     * List rides at Walt Disney World
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRidesWithHttpInfo()
    {
        $request = $this->getRidesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse2002' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ('\OpenAPI\Client\Model\InlineResponse2002' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse2002';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRidesAsync
     *
     * List rides at Walt Disney World
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRidesAsync()
    {
        return $this->getRidesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRidesAsyncWithHttpInfo
     *
     * List rides at Walt Disney World
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRidesAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse2002';
        $request = $this->getRidesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRides'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRidesRequest()
    {

        $resourcePath = '/rides';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
