/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ResortForm
    /// </summary>
    [DataContract]
    public partial class ResortForm :  IEquatable<ResortForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResortForm" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="parkId">parkId.</param>
        /// <param name="openingYear">openingYear.</param>
        /// <param name="resortType">resortType.</param>
        /// <param name="transportOptions">transportOptions.</param>
        /// <param name="category">category.</param>
        /// <param name="numOfRooms">numOfRooms.</param>
        /// <param name="quickServiceRestaurants">quickServiceRestaurants.</param>
        /// <param name="tableServiceRestaurants">tableServiceRestaurants.</param>
        /// <param name="giftShop">giftShop.</param>
        /// <param name="arcade">arcade.</param>
        /// <param name="pool">pool.</param>
        public ResortForm(string name = default(string), int? parkId = default(int?), int? openingYear = default(int?), string resortType = default(string), string transportOptions = default(string), string category = default(string), int? numOfRooms = default(int?), bool? quickServiceRestaurants = default(bool?), bool? tableServiceRestaurants = default(bool?), bool? giftShop = default(bool?), bool? arcade = default(bool?), bool? pool = default(bool?))
        {
            this.Name = name;
            this.ParkId = parkId;
            this.OpeningYear = openingYear;
            this.ResortType = resortType;
            this.TransportOptions = transportOptions;
            this.Category = category;
            this.NumOfRooms = numOfRooms;
            this.QuickServiceRestaurants = quickServiceRestaurants;
            this.TableServiceRestaurants = tableServiceRestaurants;
            this.GiftShop = giftShop;
            this.Arcade = arcade;
            this.Pool = pool;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParkId
        /// </summary>
        [DataMember(Name="parkId", EmitDefaultValue=false)]
        public int? ParkId { get; set; }

        /// <summary>
        /// Gets or Sets OpeningYear
        /// </summary>
        [DataMember(Name="openingYear", EmitDefaultValue=false)]
        public int? OpeningYear { get; set; }

        /// <summary>
        /// Gets or Sets ResortType
        /// </summary>
        [DataMember(Name="resortType", EmitDefaultValue=false)]
        public string ResortType { get; set; }

        /// <summary>
        /// Gets or Sets TransportOptions
        /// </summary>
        [DataMember(Name="transportOptions", EmitDefaultValue=false)]
        public string TransportOptions { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets NumOfRooms
        /// </summary>
        [DataMember(Name="numOfRooms", EmitDefaultValue=false)]
        public int? NumOfRooms { get; set; }

        /// <summary>
        /// Gets or Sets QuickServiceRestaurants
        /// </summary>
        [DataMember(Name="quickServiceRestaurants", EmitDefaultValue=false)]
        public bool? QuickServiceRestaurants { get; set; }

        /// <summary>
        /// Gets or Sets TableServiceRestaurants
        /// </summary>
        [DataMember(Name="tableServiceRestaurants", EmitDefaultValue=false)]
        public bool? TableServiceRestaurants { get; set; }

        /// <summary>
        /// Gets or Sets GiftShop
        /// </summary>
        [DataMember(Name="giftShop", EmitDefaultValue=false)]
        public bool? GiftShop { get; set; }

        /// <summary>
        /// Gets or Sets Arcade
        /// </summary>
        [DataMember(Name="arcade", EmitDefaultValue=false)]
        public bool? Arcade { get; set; }

        /// <summary>
        /// Gets or Sets Pool
        /// </summary>
        [DataMember(Name="pool", EmitDefaultValue=false)]
        public bool? Pool { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResortForm {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParkId: ").Append(ParkId).Append("\n");
            sb.Append("  OpeningYear: ").Append(OpeningYear).Append("\n");
            sb.Append("  ResortType: ").Append(ResortType).Append("\n");
            sb.Append("  TransportOptions: ").Append(TransportOptions).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  NumOfRooms: ").Append(NumOfRooms).Append("\n");
            sb.Append("  QuickServiceRestaurants: ").Append(QuickServiceRestaurants).Append("\n");
            sb.Append("  TableServiceRestaurants: ").Append(TableServiceRestaurants).Append("\n");
            sb.Append("  GiftShop: ").Append(GiftShop).Append("\n");
            sb.Append("  Arcade: ").Append(Arcade).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResortForm);
        }

        /// <summary>
        /// Returns true if ResortForm instances are equal
        /// </summary>
        /// <param name="input">Instance of ResortForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResortForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParkId == input.ParkId ||
                    (this.ParkId != null &&
                    this.ParkId.Equals(input.ParkId))
                ) && 
                (
                    this.OpeningYear == input.OpeningYear ||
                    (this.OpeningYear != null &&
                    this.OpeningYear.Equals(input.OpeningYear))
                ) && 
                (
                    this.ResortType == input.ResortType ||
                    (this.ResortType != null &&
                    this.ResortType.Equals(input.ResortType))
                ) && 
                (
                    this.TransportOptions == input.TransportOptions ||
                    (this.TransportOptions != null &&
                    this.TransportOptions.Equals(input.TransportOptions))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.NumOfRooms == input.NumOfRooms ||
                    (this.NumOfRooms != null &&
                    this.NumOfRooms.Equals(input.NumOfRooms))
                ) && 
                (
                    this.QuickServiceRestaurants == input.QuickServiceRestaurants ||
                    (this.QuickServiceRestaurants != null &&
                    this.QuickServiceRestaurants.Equals(input.QuickServiceRestaurants))
                ) && 
                (
                    this.TableServiceRestaurants == input.TableServiceRestaurants ||
                    (this.TableServiceRestaurants != null &&
                    this.TableServiceRestaurants.Equals(input.TableServiceRestaurants))
                ) && 
                (
                    this.GiftShop == input.GiftShop ||
                    (this.GiftShop != null &&
                    this.GiftShop.Equals(input.GiftShop))
                ) && 
                (
                    this.Arcade == input.Arcade ||
                    (this.Arcade != null &&
                    this.Arcade.Equals(input.Arcade))
                ) && 
                (
                    this.Pool == input.Pool ||
                    (this.Pool != null &&
                    this.Pool.Equals(input.Pool))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParkId != null)
                    hashCode = hashCode * 59 + this.ParkId.GetHashCode();
                if (this.OpeningYear != null)
                    hashCode = hashCode * 59 + this.OpeningYear.GetHashCode();
                if (this.ResortType != null)
                    hashCode = hashCode * 59 + this.ResortType.GetHashCode();
                if (this.TransportOptions != null)
                    hashCode = hashCode * 59 + this.TransportOptions.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.NumOfRooms != null)
                    hashCode = hashCode * 59 + this.NumOfRooms.GetHashCode();
                if (this.QuickServiceRestaurants != null)
                    hashCode = hashCode * 59 + this.QuickServiceRestaurants.GetHashCode();
                if (this.TableServiceRestaurants != null)
                    hashCode = hashCode * 59 + this.TableServiceRestaurants.GetHashCode();
                if (this.GiftShop != null)
                    hashCode = hashCode * 59 + this.GiftShop.GetHashCode();
                if (this.Arcade != null)
                    hashCode = hashCode * 59 + this.Arcade.GetHashCode();
                if (this.Pool != null)
                    hashCode = hashCode * 59 + this.Pool.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
