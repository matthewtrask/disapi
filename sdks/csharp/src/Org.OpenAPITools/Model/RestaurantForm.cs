/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RestaurantForm
    /// </summary>
    [DataContract]
    public partial class RestaurantForm :  IEquatable<RestaurantForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestaurantForm" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="parkId">parkId.</param>
        /// <param name="quickService">quickService.</param>
        /// <param name="tableService">tableService.</param>
        /// <param name="alcohol">alcohol.</param>
        /// <param name="diningPlan">diningPlan.</param>
        /// <param name="mealTypes">mealTypes.</param>
        /// <param name="foodTypes">foodTypes.</param>
        public RestaurantForm(string name = default(string), int? parkId = default(int?), bool? quickService = default(bool?), bool? tableService = default(bool?), bool? alcohol = default(bool?), bool? diningPlan = default(bool?), List<string> mealTypes = default(List<string>), List<string> foodTypes = default(List<string>))
        {
            this.Name = name;
            this.ParkId = parkId;
            this.QuickService = quickService;
            this.TableService = tableService;
            this.Alcohol = alcohol;
            this.DiningPlan = diningPlan;
            this.MealTypes = mealTypes;
            this.FoodTypes = foodTypes;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParkId
        /// </summary>
        [DataMember(Name="parkId", EmitDefaultValue=false)]
        public int? ParkId { get; set; }

        /// <summary>
        /// Gets or Sets QuickService
        /// </summary>
        [DataMember(Name="quickService", EmitDefaultValue=false)]
        public bool? QuickService { get; set; }

        /// <summary>
        /// Gets or Sets TableService
        /// </summary>
        [DataMember(Name="tableService", EmitDefaultValue=false)]
        public bool? TableService { get; set; }

        /// <summary>
        /// Gets or Sets Alcohol
        /// </summary>
        [DataMember(Name="alcohol", EmitDefaultValue=false)]
        public bool? Alcohol { get; set; }

        /// <summary>
        /// Gets or Sets DiningPlan
        /// </summary>
        [DataMember(Name="diningPlan", EmitDefaultValue=false)]
        public bool? DiningPlan { get; set; }

        /// <summary>
        /// Gets or Sets MealTypes
        /// </summary>
        [DataMember(Name="mealTypes", EmitDefaultValue=false)]
        public List<string> MealTypes { get; set; }

        /// <summary>
        /// Gets or Sets FoodTypes
        /// </summary>
        [DataMember(Name="foodTypes", EmitDefaultValue=false)]
        public List<string> FoodTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestaurantForm {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParkId: ").Append(ParkId).Append("\n");
            sb.Append("  QuickService: ").Append(QuickService).Append("\n");
            sb.Append("  TableService: ").Append(TableService).Append("\n");
            sb.Append("  Alcohol: ").Append(Alcohol).Append("\n");
            sb.Append("  DiningPlan: ").Append(DiningPlan).Append("\n");
            sb.Append("  MealTypes: ").Append(MealTypes).Append("\n");
            sb.Append("  FoodTypes: ").Append(FoodTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestaurantForm);
        }

        /// <summary>
        /// Returns true if RestaurantForm instances are equal
        /// </summary>
        /// <param name="input">Instance of RestaurantForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestaurantForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParkId == input.ParkId ||
                    (this.ParkId != null &&
                    this.ParkId.Equals(input.ParkId))
                ) && 
                (
                    this.QuickService == input.QuickService ||
                    (this.QuickService != null &&
                    this.QuickService.Equals(input.QuickService))
                ) && 
                (
                    this.TableService == input.TableService ||
                    (this.TableService != null &&
                    this.TableService.Equals(input.TableService))
                ) && 
                (
                    this.Alcohol == input.Alcohol ||
                    (this.Alcohol != null &&
                    this.Alcohol.Equals(input.Alcohol))
                ) && 
                (
                    this.DiningPlan == input.DiningPlan ||
                    (this.DiningPlan != null &&
                    this.DiningPlan.Equals(input.DiningPlan))
                ) && 
                (
                    this.MealTypes == input.MealTypes ||
                    this.MealTypes != null &&
                    this.MealTypes.SequenceEqual(input.MealTypes)
                ) && 
                (
                    this.FoodTypes == input.FoodTypes ||
                    this.FoodTypes != null &&
                    this.FoodTypes.SequenceEqual(input.FoodTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParkId != null)
                    hashCode = hashCode * 59 + this.ParkId.GetHashCode();
                if (this.QuickService != null)
                    hashCode = hashCode * 59 + this.QuickService.GetHashCode();
                if (this.TableService != null)
                    hashCode = hashCode * 59 + this.TableService.GetHashCode();
                if (this.Alcohol != null)
                    hashCode = hashCode * 59 + this.Alcohol.GetHashCode();
                if (this.DiningPlan != null)
                    hashCode = hashCode * 59 + this.DiningPlan.GetHashCode();
                if (this.MealTypes != null)
                    hashCode = hashCode * 59 + this.MealTypes.GetHashCode();
                if (this.FoodTypes != null)
                    hashCode = hashCode * 59 + this.FoodTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
