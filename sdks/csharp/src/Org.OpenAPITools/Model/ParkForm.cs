/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ParkForm
    /// </summary>
    [DataContract]
    public partial class ParkForm :  IEquatable<ParkForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParkForm" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="centralAttraction">centralAttraction.</param>
        /// <param name="yearOpened">yearOpened.</param>
        /// <param name="rideCount">rideCount.</param>
        /// <param name="restaurantCount">restaurantCount.</param>
        /// <param name="resortCount">resortCount.</param>
        /// <param name="size">size.</param>
        /// <param name="fireworks">fireworks.</param>
        public ParkForm(string name = default(string), string centralAttraction = default(string), int? yearOpened = default(int?), int? rideCount = default(int?), int? restaurantCount = default(int?), int? resortCount = default(int?), int? size = default(int?), bool? fireworks = default(bool?))
        {
            this.Name = name;
            this.CentralAttraction = centralAttraction;
            this.YearOpened = yearOpened;
            this.RideCount = rideCount;
            this.RestaurantCount = restaurantCount;
            this.ResortCount = resortCount;
            this.Size = size;
            this.Fireworks = fireworks;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CentralAttraction
        /// </summary>
        [DataMember(Name="centralAttraction", EmitDefaultValue=false)]
        public string CentralAttraction { get; set; }

        /// <summary>
        /// Gets or Sets YearOpened
        /// </summary>
        [DataMember(Name="yearOpened", EmitDefaultValue=false)]
        public int? YearOpened { get; set; }

        /// <summary>
        /// Gets or Sets RideCount
        /// </summary>
        [DataMember(Name="rideCount", EmitDefaultValue=false)]
        public int? RideCount { get; set; }

        /// <summary>
        /// Gets or Sets RestaurantCount
        /// </summary>
        [DataMember(Name="restaurantCount", EmitDefaultValue=false)]
        public int? RestaurantCount { get; set; }

        /// <summary>
        /// Gets or Sets ResortCount
        /// </summary>
        [DataMember(Name="resortCount", EmitDefaultValue=false)]
        public int? ResortCount { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Fireworks
        /// </summary>
        [DataMember(Name="fireworks", EmitDefaultValue=false)]
        public bool? Fireworks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParkForm {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CentralAttraction: ").Append(CentralAttraction).Append("\n");
            sb.Append("  YearOpened: ").Append(YearOpened).Append("\n");
            sb.Append("  RideCount: ").Append(RideCount).Append("\n");
            sb.Append("  RestaurantCount: ").Append(RestaurantCount).Append("\n");
            sb.Append("  ResortCount: ").Append(ResortCount).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Fireworks: ").Append(Fireworks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParkForm);
        }

        /// <summary>
        /// Returns true if ParkForm instances are equal
        /// </summary>
        /// <param name="input">Instance of ParkForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParkForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CentralAttraction == input.CentralAttraction ||
                    (this.CentralAttraction != null &&
                    this.CentralAttraction.Equals(input.CentralAttraction))
                ) && 
                (
                    this.YearOpened == input.YearOpened ||
                    (this.YearOpened != null &&
                    this.YearOpened.Equals(input.YearOpened))
                ) && 
                (
                    this.RideCount == input.RideCount ||
                    (this.RideCount != null &&
                    this.RideCount.Equals(input.RideCount))
                ) && 
                (
                    this.RestaurantCount == input.RestaurantCount ||
                    (this.RestaurantCount != null &&
                    this.RestaurantCount.Equals(input.RestaurantCount))
                ) && 
                (
                    this.ResortCount == input.ResortCount ||
                    (this.ResortCount != null &&
                    this.ResortCount.Equals(input.ResortCount))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Fireworks == input.Fireworks ||
                    (this.Fireworks != null &&
                    this.Fireworks.Equals(input.Fireworks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CentralAttraction != null)
                    hashCode = hashCode * 59 + this.CentralAttraction.GetHashCode();
                if (this.YearOpened != null)
                    hashCode = hashCode * 59 + this.YearOpened.GetHashCode();
                if (this.RideCount != null)
                    hashCode = hashCode * 59 + this.RideCount.GetHashCode();
                if (this.RestaurantCount != null)
                    hashCode = hashCode * 59 + this.RestaurantCount.GetHashCode();
                if (this.ResortCount != null)
                    hashCode = hashCode * 59 + this.ResortCount.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Fireworks != null)
                    hashCode = hashCode * 59 + this.Fireworks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
