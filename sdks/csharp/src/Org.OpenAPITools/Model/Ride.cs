/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Ride
    /// </summary>
    [DataContract]
    public partial class Ride :  IEquatable<Ride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ride" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="parkId">parkId.</param>
        /// <param name="openingYear">openingYear.</param>
        /// <param name="rideType">rideType.</param>
        /// <param name="rideVehicle">rideVehicle.</param>
        /// <param name="interactiveQueue">interactiveQueue.</param>
        /// <param name="giftStoreFinish">giftStoreFinish.</param>
        /// <param name="singleRider">singleRider.</param>
        /// <param name="ridePhoto">ridePhoto.</param>
        /// <param name="heightRestriction">heightRestriction.</param>
        public Ride(string name = default(string), int? parkId = default(int?), int? openingYear = default(int?), string rideType = default(string), string rideVehicle = default(string), bool? interactiveQueue = default(bool?), bool? giftStoreFinish = default(bool?), int? singleRider = default(int?), int? ridePhoto = default(int?), int? heightRestriction = default(int?))
        {
            this.Name = name;
            this.ParkId = parkId;
            this.OpeningYear = openingYear;
            this.RideType = rideType;
            this.RideVehicle = rideVehicle;
            this.InteractiveQueue = interactiveQueue;
            this.GiftStoreFinish = giftStoreFinish;
            this.SingleRider = singleRider;
            this.RidePhoto = ridePhoto;
            this.HeightRestriction = heightRestriction;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParkId
        /// </summary>
        [DataMember(Name="parkId", EmitDefaultValue=false)]
        public int? ParkId { get; set; }

        /// <summary>
        /// Gets or Sets OpeningYear
        /// </summary>
        [DataMember(Name="openingYear", EmitDefaultValue=false)]
        public int? OpeningYear { get; set; }

        /// <summary>
        /// Gets or Sets RideType
        /// </summary>
        [DataMember(Name="rideType", EmitDefaultValue=false)]
        public string RideType { get; set; }

        /// <summary>
        /// Gets or Sets RideVehicle
        /// </summary>
        [DataMember(Name="rideVehicle", EmitDefaultValue=false)]
        public string RideVehicle { get; set; }

        /// <summary>
        /// Gets or Sets InteractiveQueue
        /// </summary>
        [DataMember(Name="interactiveQueue", EmitDefaultValue=false)]
        public bool? InteractiveQueue { get; set; }

        /// <summary>
        /// Gets or Sets GiftStoreFinish
        /// </summary>
        [DataMember(Name="giftStoreFinish", EmitDefaultValue=false)]
        public bool? GiftStoreFinish { get; set; }

        /// <summary>
        /// Gets or Sets SingleRider
        /// </summary>
        [DataMember(Name="singleRider", EmitDefaultValue=false)]
        public int? SingleRider { get; set; }

        /// <summary>
        /// Gets or Sets RidePhoto
        /// </summary>
        [DataMember(Name="ridePhoto", EmitDefaultValue=false)]
        public int? RidePhoto { get; set; }

        /// <summary>
        /// Gets or Sets HeightRestriction
        /// </summary>
        [DataMember(Name="heightRestriction", EmitDefaultValue=false)]
        public int? HeightRestriction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ride {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParkId: ").Append(ParkId).Append("\n");
            sb.Append("  OpeningYear: ").Append(OpeningYear).Append("\n");
            sb.Append("  RideType: ").Append(RideType).Append("\n");
            sb.Append("  RideVehicle: ").Append(RideVehicle).Append("\n");
            sb.Append("  InteractiveQueue: ").Append(InteractiveQueue).Append("\n");
            sb.Append("  GiftStoreFinish: ").Append(GiftStoreFinish).Append("\n");
            sb.Append("  SingleRider: ").Append(SingleRider).Append("\n");
            sb.Append("  RidePhoto: ").Append(RidePhoto).Append("\n");
            sb.Append("  HeightRestriction: ").Append(HeightRestriction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ride);
        }

        /// <summary>
        /// Returns true if Ride instances are equal
        /// </summary>
        /// <param name="input">Instance of Ride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ride input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ParkId == input.ParkId ||
                    (this.ParkId != null &&
                    this.ParkId.Equals(input.ParkId))
                ) && 
                (
                    this.OpeningYear == input.OpeningYear ||
                    (this.OpeningYear != null &&
                    this.OpeningYear.Equals(input.OpeningYear))
                ) && 
                (
                    this.RideType == input.RideType ||
                    (this.RideType != null &&
                    this.RideType.Equals(input.RideType))
                ) && 
                (
                    this.RideVehicle == input.RideVehicle ||
                    (this.RideVehicle != null &&
                    this.RideVehicle.Equals(input.RideVehicle))
                ) && 
                (
                    this.InteractiveQueue == input.InteractiveQueue ||
                    (this.InteractiveQueue != null &&
                    this.InteractiveQueue.Equals(input.InteractiveQueue))
                ) && 
                (
                    this.GiftStoreFinish == input.GiftStoreFinish ||
                    (this.GiftStoreFinish != null &&
                    this.GiftStoreFinish.Equals(input.GiftStoreFinish))
                ) && 
                (
                    this.SingleRider == input.SingleRider ||
                    (this.SingleRider != null &&
                    this.SingleRider.Equals(input.SingleRider))
                ) && 
                (
                    this.RidePhoto == input.RidePhoto ||
                    (this.RidePhoto != null &&
                    this.RidePhoto.Equals(input.RidePhoto))
                ) && 
                (
                    this.HeightRestriction == input.HeightRestriction ||
                    (this.HeightRestriction != null &&
                    this.HeightRestriction.Equals(input.HeightRestriction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ParkId != null)
                    hashCode = hashCode * 59 + this.ParkId.GetHashCode();
                if (this.OpeningYear != null)
                    hashCode = hashCode * 59 + this.OpeningYear.GetHashCode();
                if (this.RideType != null)
                    hashCode = hashCode * 59 + this.RideType.GetHashCode();
                if (this.RideVehicle != null)
                    hashCode = hashCode * 59 + this.RideVehicle.GetHashCode();
                if (this.InteractiveQueue != null)
                    hashCode = hashCode * 59 + this.InteractiveQueue.GetHashCode();
                if (this.GiftStoreFinish != null)
                    hashCode = hashCode * 59 + this.GiftStoreFinish.GetHashCode();
                if (this.SingleRider != null)
                    hashCode = hashCode * 59 + this.SingleRider.GetHashCode();
                if (this.RidePhoto != null)
                    hashCode = hashCode * 59 + this.RidePhoto.GetHashCode();
                if (this.HeightRestriction != null)
                    hashCode = hashCode * 59 + this.HeightRestriction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
