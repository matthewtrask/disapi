/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRidesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new ride resource
        /// </summary>
        /// <remarks>
        /// Create a new ride resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns></returns>
        void CreateRides (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);

        /// <summary>
        /// Create a new ride resource
        /// </summary>
        /// <remarks>
        /// Create a new ride resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRidesWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);
        /// <summary>
        /// Delete ride resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns></returns>
        void DeleteRide (int? id);

        /// <summary>
        /// Delete ride resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRideWithHttpInfo (int? id);
        /// <summary>
        /// Edit a ride by ID
        /// </summary>
        /// <remarks>
        /// Edit a ride in the resource collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns></returns>
        void EditRide (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);

        /// <summary>
        /// Edit a ride by ID
        /// </summary>
        /// <remarks>
        /// Edit a ride in the resource collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditRideWithHttpInfo (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);
        /// <summary>
        /// Get ride by ID
        /// </summary>
        /// <remarks>
        /// Get a ride at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetRide (int? id);

        /// <summary>
        /// Get ride by ID
        /// </summary>
        /// <remarks>
        /// Get a ride at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetRideWithHttpInfo (int? id);
        /// <summary>
        /// List rides at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of rides at all Walt Disney World Parks 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetRides ();

        /// <summary>
        /// List rides at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of rides at all Walt Disney World Parks 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetRidesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new ride resource
        /// </summary>
        /// <remarks>
        /// Create a new ride resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRidesAsync (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);

        /// <summary>
        /// Create a new ride resource
        /// </summary>
        /// <remarks>
        /// Create a new ride resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRidesAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);
        /// <summary>
        /// Delete ride resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRideAsync (int? id);

        /// <summary>
        /// Delete ride resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRideAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Edit a ride by ID
        /// </summary>
        /// <remarks>
        /// Edit a ride in the resource collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditRideAsync (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);

        /// <summary>
        /// Edit a ride by ID
        /// </summary>
        /// <remarks>
        /// Edit a ride in the resource collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditRideAsyncWithHttpInfo (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null);
        /// <summary>
        /// Get ride by ID
        /// </summary>
        /// <remarks>
        /// Get a ride at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetRideAsync (int? id);

        /// <summary>
        /// Get ride by ID
        /// </summary>
        /// <remarks>
        /// Get a ride at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetRideAsyncWithHttpInfo (int? id);
        /// <summary>
        /// List rides at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of rides at all Walt Disney World Parks 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetRidesAsync ();

        /// <summary>
        /// List rides at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of rides at all Walt Disney World Parks 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetRidesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RidesApi : IRidesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RidesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RidesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RidesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RidesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new ride resource Create a new ride resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns></returns>
        public void CreateRides (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {
             CreateRidesWithHttpInfo(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);
        }

        /// <summary>
        /// Create a new ride resource Create a new ride resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRidesWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {

            var localVarPath = "/rides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (rideType != null) localVarFormParams.Add("rideType", this.Configuration.ApiClient.ParameterToString(rideType)); // form parameter
            if (rideVehicle != null) localVarFormParams.Add("rideVehicle", this.Configuration.ApiClient.ParameterToString(rideVehicle)); // form parameter
            if (interactiveQueue != null) localVarFormParams.Add("interactiveQueue", this.Configuration.ApiClient.ParameterToString(interactiveQueue)); // form parameter
            if (giftStoreFinish != null) localVarFormParams.Add("giftStoreFinish", this.Configuration.ApiClient.ParameterToString(giftStoreFinish)); // form parameter
            if (singleRider != null) localVarFormParams.Add("singleRider", this.Configuration.ApiClient.ParameterToString(singleRider)); // form parameter
            if (ridePhoto != null) localVarFormParams.Add("ridePhoto", this.Configuration.ApiClient.ParameterToString(ridePhoto)); // form parameter
            if (heightRestriction != null) localVarFormParams.Add("heightRestriction", this.Configuration.ApiClient.ParameterToString(heightRestriction)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new ride resource Create a new ride resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRidesAsync (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {
             await CreateRidesAsyncWithHttpInfo(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);

        }

        /// <summary>
        /// Create a new ride resource Create a new ride resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRidesAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {

            var localVarPath = "/rides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (rideType != null) localVarFormParams.Add("rideType", this.Configuration.ApiClient.ParameterToString(rideType)); // form parameter
            if (rideVehicle != null) localVarFormParams.Add("rideVehicle", this.Configuration.ApiClient.ParameterToString(rideVehicle)); // form parameter
            if (interactiveQueue != null) localVarFormParams.Add("interactiveQueue", this.Configuration.ApiClient.ParameterToString(interactiveQueue)); // form parameter
            if (giftStoreFinish != null) localVarFormParams.Add("giftStoreFinish", this.Configuration.ApiClient.ParameterToString(giftStoreFinish)); // form parameter
            if (singleRider != null) localVarFormParams.Add("singleRider", this.Configuration.ApiClient.ParameterToString(singleRider)); // form parameter
            if (ridePhoto != null) localVarFormParams.Add("ridePhoto", this.Configuration.ApiClient.ParameterToString(ridePhoto)); // form parameter
            if (heightRestriction != null) localVarFormParams.Add("heightRestriction", this.Configuration.ApiClient.ParameterToString(heightRestriction)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete ride resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns></returns>
        public void DeleteRide (int? id)
        {
             DeleteRideWithHttpInfo(id);
        }

        /// <summary>
        /// Delete ride resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRideWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RidesApi->DeleteRide");

            var localVarPath = "/rides/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete ride resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRideAsync (int? id)
        {
             await DeleteRideAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete ride resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRideAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RidesApi->DeleteRide");

            var localVarPath = "/rides/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a ride by ID Edit a ride in the resource collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns></returns>
        public void EditRide (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {
             EditRideWithHttpInfo(id, name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);
        }

        /// <summary>
        /// Edit a ride by ID Edit a ride in the resource collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditRideWithHttpInfo (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RidesApi->EditRide");

            var localVarPath = "/rides/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (rideType != null) localVarFormParams.Add("rideType", this.Configuration.ApiClient.ParameterToString(rideType)); // form parameter
            if (rideVehicle != null) localVarFormParams.Add("rideVehicle", this.Configuration.ApiClient.ParameterToString(rideVehicle)); // form parameter
            if (interactiveQueue != null) localVarFormParams.Add("interactiveQueue", this.Configuration.ApiClient.ParameterToString(interactiveQueue)); // form parameter
            if (giftStoreFinish != null) localVarFormParams.Add("giftStoreFinish", this.Configuration.ApiClient.ParameterToString(giftStoreFinish)); // form parameter
            if (singleRider != null) localVarFormParams.Add("singleRider", this.Configuration.ApiClient.ParameterToString(singleRider)); // form parameter
            if (ridePhoto != null) localVarFormParams.Add("ridePhoto", this.Configuration.ApiClient.ParameterToString(ridePhoto)); // form parameter
            if (heightRestriction != null) localVarFormParams.Add("heightRestriction", this.Configuration.ApiClient.ParameterToString(heightRestriction)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a ride by ID Edit a ride in the resource collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditRideAsync (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {
             await EditRideAsyncWithHttpInfo(id, name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);

        }

        /// <summary>
        /// Edit a ride by ID Edit a ride in the resource collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="rideType"> (optional)</param>
        /// <param name="rideVehicle"> (optional)</param>
        /// <param name="interactiveQueue"> (optional)</param>
        /// <param name="giftStoreFinish"> (optional)</param>
        /// <param name="singleRider"> (optional)</param>
        /// <param name="ridePhoto"> (optional)</param>
        /// <param name="heightRestriction"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditRideAsyncWithHttpInfo (int? id, string name = null, int? parkId = null, int? openingYear = null, string rideType = null, string rideVehicle = null, bool? interactiveQueue = null, bool? giftStoreFinish = null, int? singleRider = null, int? ridePhoto = null, int? heightRestriction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RidesApi->EditRide");

            var localVarPath = "/rides/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (rideType != null) localVarFormParams.Add("rideType", this.Configuration.ApiClient.ParameterToString(rideType)); // form parameter
            if (rideVehicle != null) localVarFormParams.Add("rideVehicle", this.Configuration.ApiClient.ParameterToString(rideVehicle)); // form parameter
            if (interactiveQueue != null) localVarFormParams.Add("interactiveQueue", this.Configuration.ApiClient.ParameterToString(interactiveQueue)); // form parameter
            if (giftStoreFinish != null) localVarFormParams.Add("giftStoreFinish", this.Configuration.ApiClient.ParameterToString(giftStoreFinish)); // form parameter
            if (singleRider != null) localVarFormParams.Add("singleRider", this.Configuration.ApiClient.ParameterToString(singleRider)); // form parameter
            if (ridePhoto != null) localVarFormParams.Add("ridePhoto", this.Configuration.ApiClient.ParameterToString(ridePhoto)); // form parameter
            if (heightRestriction != null) localVarFormParams.Add("heightRestriction", this.Configuration.ApiClient.ParameterToString(heightRestriction)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get ride by ID Get a ride at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetRide (int? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = GetRideWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ride by ID Get a ride at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > GetRideWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RidesApi->GetRide");

            var localVarPath = "/rides/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get ride by ID Get a ride at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetRideAsync (int? id)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await GetRideAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ride by ID Get a ride at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the ride</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetRideAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RidesApi->GetRide");

            var localVarPath = "/rides/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// List rides at Walt Disney World Get a list of rides at all Walt Disney World Parks 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetRides ()
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetRidesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List rides at Walt Disney World Get a list of rides at all Walt Disney World Parks 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetRidesWithHttpInfo ()
        {

            var localVarPath = "/rides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// List rides at Walt Disney World Get a list of rides at all Walt Disney World Parks 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetRidesAsync ()
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetRidesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List rides at Walt Disney World Get a list of rides at all Walt Disney World Parks 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetRidesAsyncWithHttpInfo ()
        {

            var localVarPath = "/rides";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRides", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

    }
}
