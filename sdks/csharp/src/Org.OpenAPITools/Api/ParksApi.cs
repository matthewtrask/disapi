/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new park resource in the collection
        /// </summary>
        /// <remarks>
        /// Create a new park at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns></returns>
        void CreatePark (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null);

        /// <summary>
        /// Create a new park resource in the collection
        /// </summary>
        /// <remarks>
        /// Create a new park at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateParkWithHttpInfo (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null);
        /// <summary>
        /// Remove a resource from the collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns></returns>
        void DeletePark (int? id);

        /// <summary>
        /// Remove a resource from the collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteParkWithHttpInfo (int? id);
        /// <summary>
        /// Edit a resource by ID
        /// </summary>
        /// <remarks>
        /// Edit a park resource by an ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns></returns>
        void EditPark (int? id);

        /// <summary>
        /// Edit a resource by ID
        /// </summary>
        /// <remarks>
        /// Edit a park resource by an ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditParkWithHttpInfo (int? id);
        /// <summary>
        /// List a park by ID
        /// </summary>
        /// <remarks>
        /// Get a park at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetPark (int? id);

        /// <summary>
        /// List a park by ID
        /// </summary>
        /// <remarks>
        /// Get a park at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetParkWithHttpInfo (int? id);
        /// <summary>
        /// List all parks at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of all parks at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetParks ();

        /// <summary>
        /// List all parks at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of all parks at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetParksWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new park resource in the collection
        /// </summary>
        /// <remarks>
        /// Create a new park at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateParkAsync (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null);

        /// <summary>
        /// Create a new park resource in the collection
        /// </summary>
        /// <remarks>
        /// Create a new park at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateParkAsyncWithHttpInfo (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null);
        /// <summary>
        /// Remove a resource from the collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteParkAsync (int? id);

        /// <summary>
        /// Remove a resource from the collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParkAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Edit a resource by ID
        /// </summary>
        /// <remarks>
        /// Edit a park resource by an ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditParkAsync (int? id);

        /// <summary>
        /// Edit a resource by ID
        /// </summary>
        /// <remarks>
        /// Edit a park resource by an ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditParkAsyncWithHttpInfo (int? id);
        /// <summary>
        /// List a park by ID
        /// </summary>
        /// <remarks>
        /// Get a park at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetParkAsync (int? id);

        /// <summary>
        /// List a park by ID
        /// </summary>
        /// <remarks>
        /// Get a park at Walt Disney World by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetParkAsyncWithHttpInfo (int? id);
        /// <summary>
        /// List all parks at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of all parks at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetParksAsync ();

        /// <summary>
        /// List all parks at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of all parks at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetParksAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ParksApi : IParksApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ParksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ParksApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ParksApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new park resource in the collection Create a new park at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns></returns>
        public void CreatePark (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null)
        {
             CreateParkWithHttpInfo(name, centralAttraction, yearOpened, rideCount, restaurantCount, resortCount, size, fireworks);
        }

        /// <summary>
        /// Create a new park resource in the collection Create a new park at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateParkWithHttpInfo (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null)
        {

            var localVarPath = "/parks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (centralAttraction != null) localVarFormParams.Add("centralAttraction", this.Configuration.ApiClient.ParameterToString(centralAttraction)); // form parameter
            if (yearOpened != null) localVarFormParams.Add("yearOpened", this.Configuration.ApiClient.ParameterToString(yearOpened)); // form parameter
            if (rideCount != null) localVarFormParams.Add("rideCount", this.Configuration.ApiClient.ParameterToString(rideCount)); // form parameter
            if (restaurantCount != null) localVarFormParams.Add("restaurantCount", this.Configuration.ApiClient.ParameterToString(restaurantCount)); // form parameter
            if (resortCount != null) localVarFormParams.Add("resortCount", this.Configuration.ApiClient.ParameterToString(resortCount)); // form parameter
            if (size != null) localVarFormParams.Add("size", this.Configuration.ApiClient.ParameterToString(size)); // form parameter
            if (fireworks != null) localVarFormParams.Add("fireworks", this.Configuration.ApiClient.ParameterToString(fireworks)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new park resource in the collection Create a new park at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateParkAsync (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null)
        {
             await CreateParkAsyncWithHttpInfo(name, centralAttraction, yearOpened, rideCount, restaurantCount, resortCount, size, fireworks);

        }

        /// <summary>
        /// Create a new park resource in the collection Create a new park at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="centralAttraction"> (optional)</param>
        /// <param name="yearOpened"> (optional)</param>
        /// <param name="rideCount"> (optional)</param>
        /// <param name="restaurantCount"> (optional)</param>
        /// <param name="resortCount"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <param name="fireworks"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateParkAsyncWithHttpInfo (string name = null, string centralAttraction = null, int? yearOpened = null, int? rideCount = null, int? restaurantCount = null, int? resortCount = null, int? size = null, bool? fireworks = null)
        {

            var localVarPath = "/parks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (centralAttraction != null) localVarFormParams.Add("centralAttraction", this.Configuration.ApiClient.ParameterToString(centralAttraction)); // form parameter
            if (yearOpened != null) localVarFormParams.Add("yearOpened", this.Configuration.ApiClient.ParameterToString(yearOpened)); // form parameter
            if (rideCount != null) localVarFormParams.Add("rideCount", this.Configuration.ApiClient.ParameterToString(rideCount)); // form parameter
            if (restaurantCount != null) localVarFormParams.Add("restaurantCount", this.Configuration.ApiClient.ParameterToString(restaurantCount)); // form parameter
            if (resortCount != null) localVarFormParams.Add("resortCount", this.Configuration.ApiClient.ParameterToString(resortCount)); // form parameter
            if (size != null) localVarFormParams.Add("size", this.Configuration.ApiClient.ParameterToString(size)); // form parameter
            if (fireworks != null) localVarFormParams.Add("fireworks", this.Configuration.ApiClient.ParameterToString(fireworks)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a resource from the collection Remove a resource from the collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns></returns>
        public void DeletePark (int? id)
        {
             DeleteParkWithHttpInfo(id);
        }

        /// <summary>
        /// Remove a resource from the collection Remove a resource from the collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteParkWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParksApi->DeletePark");

            var localVarPath = "/parks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a resource from the collection Remove a resource from the collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteParkAsync (int? id)
        {
             await DeleteParkAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Remove a resource from the collection Remove a resource from the collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteParkAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParksApi->DeletePark");

            var localVarPath = "/parks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a resource by ID Edit a park resource by an ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns></returns>
        public void EditPark (int? id)
        {
             EditParkWithHttpInfo(id);
        }

        /// <summary>
        /// Edit a resource by ID Edit a park resource by an ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditParkWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParksApi->EditPark");

            var localVarPath = "/parks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a resource by ID Edit a park resource by an ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditParkAsync (int? id)
        {
             await EditParkAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Edit a resource by ID Edit a park resource by an ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditParkAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParksApi->EditPark");

            var localVarPath = "/parks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditPark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List a park by ID Get a park at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetPark (int? id)
        {
             ApiResponse<InlineResponse2007> localVarResponse = GetParkWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a park by ID Get a park at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GetParkWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParksApi->GetPark");

            var localVarPath = "/parks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// List a park by ID Get a park at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetParkAsync (int? id)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GetParkAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a park by ID Get a park at Walt Disney World by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the park</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetParkAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParksApi->GetPark");

            var localVarPath = "/parks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// List all parks at Walt Disney World Get a list of all parks at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetParks ()
        {
             ApiResponse<InlineResponse2006> localVarResponse = GetParksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all parks at Walt Disney World Get a list of all parks at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > GetParksWithHttpInfo ()
        {

            var localVarPath = "/parks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// List all parks at Walt Disney World Get a list of all parks at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GetParksAsync ()
        {
             ApiResponse<InlineResponse2006> localVarResponse = await GetParksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all parks at Walt Disney World Get a list of all parks at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetParksAsyncWithHttpInfo ()
        {

            var localVarPath = "/parks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

    }
}
