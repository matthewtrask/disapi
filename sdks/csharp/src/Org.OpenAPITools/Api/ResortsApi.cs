/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResortsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new resort resource
        /// </summary>
        /// <remarks>
        /// Create a new resort resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns></returns>
        void CreateResort (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);

        /// <summary>
        /// Create a new resort resource
        /// </summary>
        /// <remarks>
        /// Create a new resort resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateResortWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);
        /// <summary>
        /// Delete resort resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteResort ();

        /// <summary>
        /// Delete resort resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResortWithHttpInfo ();
        /// <summary>
        /// Edit a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Find and edit a specific resort resource by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns></returns>
        void EditResort (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);

        /// <summary>
        /// Edit a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Find and edit a specific resort resource by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditResortWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);
        /// <summary>
        /// List a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Get a specific resort resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetResort (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);

        /// <summary>
        /// List a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Get a specific resort resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetResortWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);
        /// <summary>
        /// List resorts at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of resorts at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetResorts ();

        /// <summary>
        /// List resorts at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of resorts at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetResortsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new resort resource
        /// </summary>
        /// <remarks>
        /// Create a new resort resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateResortAsync (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);

        /// <summary>
        /// Create a new resort resource
        /// </summary>
        /// <remarks>
        /// Create a new resort resource for the Walt Disney World Resort
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateResortAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);
        /// <summary>
        /// Delete resort resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResortAsync ();

        /// <summary>
        /// Delete resort resource by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResortAsyncWithHttpInfo ();
        /// <summary>
        /// Edit a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Find and edit a specific resort resource by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditResortAsync (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);

        /// <summary>
        /// Edit a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Find and edit a specific resort resource by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditResortAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);
        /// <summary>
        /// List a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Get a specific resort resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetResortAsync (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);

        /// <summary>
        /// List a specific resort resource by ID
        /// </summary>
        /// <remarks>
        /// Get a specific resort resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetResortAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null);
        /// <summary>
        /// List resorts at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of resorts at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetResortsAsync ();

        /// <summary>
        /// List resorts at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of resorts at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetResortsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResortsApi : IResortsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResortsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResortsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResortsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResortsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new resort resource Create a new resort resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns></returns>
        public void CreateResort (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {
             CreateResortWithHttpInfo(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);
        }

        /// <summary>
        /// Create a new resort resource Create a new resort resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateResortWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {

            var localVarPath = "/resorts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (resortType != null) localVarFormParams.Add("resortType", this.Configuration.ApiClient.ParameterToString(resortType)); // form parameter
            if (transportOptions != null) localVarFormParams.Add("transportOptions", this.Configuration.ApiClient.ParameterToString(transportOptions)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (numOfRooms != null) localVarFormParams.Add("numOfRooms", this.Configuration.ApiClient.ParameterToString(numOfRooms)); // form parameter
            if (quickServiceRestaurants != null) localVarFormParams.Add("quickServiceRestaurants", this.Configuration.ApiClient.ParameterToString(quickServiceRestaurants)); // form parameter
            if (tableServiceRestaurants != null) localVarFormParams.Add("tableServiceRestaurants", this.Configuration.ApiClient.ParameterToString(tableServiceRestaurants)); // form parameter
            if (giftShop != null) localVarFormParams.Add("giftShop", this.Configuration.ApiClient.ParameterToString(giftShop)); // form parameter
            if (arcade != null) localVarFormParams.Add("arcade", this.Configuration.ApiClient.ParameterToString(arcade)); // form parameter
            if (pool != null) localVarFormParams.Add("pool", this.Configuration.ApiClient.ParameterToString(pool)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new resort resource Create a new resort resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateResortAsync (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {
             await CreateResortAsyncWithHttpInfo(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);

        }

        /// <summary>
        /// Create a new resort resource Create a new resort resource for the Walt Disney World Resort
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateResortAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {

            var localVarPath = "/resorts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (resortType != null) localVarFormParams.Add("resortType", this.Configuration.ApiClient.ParameterToString(resortType)); // form parameter
            if (transportOptions != null) localVarFormParams.Add("transportOptions", this.Configuration.ApiClient.ParameterToString(transportOptions)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (numOfRooms != null) localVarFormParams.Add("numOfRooms", this.Configuration.ApiClient.ParameterToString(numOfRooms)); // form parameter
            if (quickServiceRestaurants != null) localVarFormParams.Add("quickServiceRestaurants", this.Configuration.ApiClient.ParameterToString(quickServiceRestaurants)); // form parameter
            if (tableServiceRestaurants != null) localVarFormParams.Add("tableServiceRestaurants", this.Configuration.ApiClient.ParameterToString(tableServiceRestaurants)); // form parameter
            if (giftShop != null) localVarFormParams.Add("giftShop", this.Configuration.ApiClient.ParameterToString(giftShop)); // form parameter
            if (arcade != null) localVarFormParams.Add("arcade", this.Configuration.ApiClient.ParameterToString(arcade)); // form parameter
            if (pool != null) localVarFormParams.Add("pool", this.Configuration.ApiClient.ParameterToString(pool)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete resort resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteResort ()
        {
             DeleteResortWithHttpInfo();
        }

        /// <summary>
        /// Delete resort resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteResortWithHttpInfo ()
        {

            var localVarPath = "/resorts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete resort resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResortAsync ()
        {
             await DeleteResortAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete resort resource by ID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResortAsyncWithHttpInfo ()
        {

            var localVarPath = "/resorts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a specific resort resource by ID Find and edit a specific resort resource by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns></returns>
        public void EditResort (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {
             EditResortWithHttpInfo(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);
        }

        /// <summary>
        /// Edit a specific resort resource by ID Find and edit a specific resort resource by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditResortWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {

            var localVarPath = "/resorts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (resortType != null) localVarFormParams.Add("resortType", this.Configuration.ApiClient.ParameterToString(resortType)); // form parameter
            if (transportOptions != null) localVarFormParams.Add("transportOptions", this.Configuration.ApiClient.ParameterToString(transportOptions)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (numOfRooms != null) localVarFormParams.Add("numOfRooms", this.Configuration.ApiClient.ParameterToString(numOfRooms)); // form parameter
            if (quickServiceRestaurants != null) localVarFormParams.Add("quickServiceRestaurants", this.Configuration.ApiClient.ParameterToString(quickServiceRestaurants)); // form parameter
            if (tableServiceRestaurants != null) localVarFormParams.Add("tableServiceRestaurants", this.Configuration.ApiClient.ParameterToString(tableServiceRestaurants)); // form parameter
            if (giftShop != null) localVarFormParams.Add("giftShop", this.Configuration.ApiClient.ParameterToString(giftShop)); // form parameter
            if (arcade != null) localVarFormParams.Add("arcade", this.Configuration.ApiClient.ParameterToString(arcade)); // form parameter
            if (pool != null) localVarFormParams.Add("pool", this.Configuration.ApiClient.ParameterToString(pool)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a specific resort resource by ID Find and edit a specific resort resource by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditResortAsync (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {
             await EditResortAsyncWithHttpInfo(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);

        }

        /// <summary>
        /// Edit a specific resort resource by ID Find and edit a specific resort resource by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditResortAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {

            var localVarPath = "/resorts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (resortType != null) localVarFormParams.Add("resortType", this.Configuration.ApiClient.ParameterToString(resortType)); // form parameter
            if (transportOptions != null) localVarFormParams.Add("transportOptions", this.Configuration.ApiClient.ParameterToString(transportOptions)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (numOfRooms != null) localVarFormParams.Add("numOfRooms", this.Configuration.ApiClient.ParameterToString(numOfRooms)); // form parameter
            if (quickServiceRestaurants != null) localVarFormParams.Add("quickServiceRestaurants", this.Configuration.ApiClient.ParameterToString(quickServiceRestaurants)); // form parameter
            if (tableServiceRestaurants != null) localVarFormParams.Add("tableServiceRestaurants", this.Configuration.ApiClient.ParameterToString(tableServiceRestaurants)); // form parameter
            if (giftShop != null) localVarFormParams.Add("giftShop", this.Configuration.ApiClient.ParameterToString(giftShop)); // form parameter
            if (arcade != null) localVarFormParams.Add("arcade", this.Configuration.ApiClient.ParameterToString(arcade)); // form parameter
            if (pool != null) localVarFormParams.Add("pool", this.Configuration.ApiClient.ParameterToString(pool)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List a specific resort resource by ID Get a specific resort resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetResort (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetResortWithHttpInfo(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a specific resort resource by ID Get a specific resort resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetResortWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {

            var localVarPath = "/resorts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (resortType != null) localVarFormParams.Add("resortType", this.Configuration.ApiClient.ParameterToString(resortType)); // form parameter
            if (transportOptions != null) localVarFormParams.Add("transportOptions", this.Configuration.ApiClient.ParameterToString(transportOptions)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (numOfRooms != null) localVarFormParams.Add("numOfRooms", this.Configuration.ApiClient.ParameterToString(numOfRooms)); // form parameter
            if (quickServiceRestaurants != null) localVarFormParams.Add("quickServiceRestaurants", this.Configuration.ApiClient.ParameterToString(quickServiceRestaurants)); // form parameter
            if (tableServiceRestaurants != null) localVarFormParams.Add("tableServiceRestaurants", this.Configuration.ApiClient.ParameterToString(tableServiceRestaurants)); // form parameter
            if (giftShop != null) localVarFormParams.Add("giftShop", this.Configuration.ApiClient.ParameterToString(giftShop)); // form parameter
            if (arcade != null) localVarFormParams.Add("arcade", this.Configuration.ApiClient.ParameterToString(arcade)); // form parameter
            if (pool != null) localVarFormParams.Add("pool", this.Configuration.ApiClient.ParameterToString(pool)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// List a specific resort resource by ID Get a specific resort resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetResortAsync (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetResortAsyncWithHttpInfo(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a specific resort resource by ID Get a specific resort resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="openingYear"> (optional)</param>
        /// <param name="resortType"> (optional)</param>
        /// <param name="transportOptions"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="numOfRooms"> (optional)</param>
        /// <param name="quickServiceRestaurants"> (optional)</param>
        /// <param name="tableServiceRestaurants"> (optional)</param>
        /// <param name="giftShop"> (optional)</param>
        /// <param name="arcade"> (optional)</param>
        /// <param name="pool"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetResortAsyncWithHttpInfo (string name = null, int? parkId = null, int? openingYear = null, string resortType = null, string transportOptions = null, string category = null, int? numOfRooms = null, bool? quickServiceRestaurants = null, bool? tableServiceRestaurants = null, bool? giftShop = null, bool? arcade = null, bool? pool = null)
        {

            var localVarPath = "/resorts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (openingYear != null) localVarFormParams.Add("openingYear", this.Configuration.ApiClient.ParameterToString(openingYear)); // form parameter
            if (resortType != null) localVarFormParams.Add("resortType", this.Configuration.ApiClient.ParameterToString(resortType)); // form parameter
            if (transportOptions != null) localVarFormParams.Add("transportOptions", this.Configuration.ApiClient.ParameterToString(transportOptions)); // form parameter
            if (category != null) localVarFormParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // form parameter
            if (numOfRooms != null) localVarFormParams.Add("numOfRooms", this.Configuration.ApiClient.ParameterToString(numOfRooms)); // form parameter
            if (quickServiceRestaurants != null) localVarFormParams.Add("quickServiceRestaurants", this.Configuration.ApiClient.ParameterToString(quickServiceRestaurants)); // form parameter
            if (tableServiceRestaurants != null) localVarFormParams.Add("tableServiceRestaurants", this.Configuration.ApiClient.ParameterToString(tableServiceRestaurants)); // form parameter
            if (giftShop != null) localVarFormParams.Add("giftShop", this.Configuration.ApiClient.ParameterToString(giftShop)); // form parameter
            if (arcade != null) localVarFormParams.Add("arcade", this.Configuration.ApiClient.ParameterToString(arcade)); // form parameter
            if (pool != null) localVarFormParams.Add("pool", this.Configuration.ApiClient.ParameterToString(pool)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// List resorts at Walt Disney World Get a list of resorts at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetResorts ()
        {
             ApiResponse<InlineResponse200> localVarResponse = GetResortsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List resorts at Walt Disney World Get a list of resorts at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetResortsWithHttpInfo ()
        {

            var localVarPath = "/resorts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResorts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// List resorts at Walt Disney World Get a list of resorts at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetResortsAsync ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetResortsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List resorts at Walt Disney World Get a list of resorts at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetResortsAsyncWithHttpInfo ()
        {

            var localVarPath = "/resorts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResorts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

    }
}
