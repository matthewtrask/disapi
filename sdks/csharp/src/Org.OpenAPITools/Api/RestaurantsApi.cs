/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestaurantsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new restaurant resource
        /// </summary>
        /// <remarks>
        /// Create a new restaurnat resource at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns></returns>
        void CreateRestaurant (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);

        /// <summary>
        /// Create a new restaurant resource
        /// </summary>
        /// <remarks>
        /// Create a new restaurnat resource at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRestaurantWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);
        /// <summary>
        /// Remove a resource from the restaurants collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the restaurants collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteRestaurant ();

        /// <summary>
        /// Remove a resource from the restaurants collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the restaurants collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRestaurantWithHttpInfo ();
        /// <summary>
        /// Edit a single restaurant resource in the collection by ID
        /// </summary>
        /// <remarks>
        /// Edit a restaurant by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns></returns>
        void EditRestaurant (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);

        /// <summary>
        /// Edit a single restaurant resource in the collection by ID
        /// </summary>
        /// <remarks>
        /// Edit a restaurant by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditRestaurantWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);
        /// <summary>
        /// List a single restaurant resource from the collection by ID
        /// </summary>
        /// <remarks>
        /// Get a single restaurant resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetRestaurant ();

        /// <summary>
        /// List a single restaurant resource from the collection by ID
        /// </summary>
        /// <remarks>
        /// Get a single restaurant resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetRestaurantWithHttpInfo ();
        /// <summary>
        /// List restaurants at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of restaurants at all parks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetRestaurants ();

        /// <summary>
        /// List restaurants at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of restaurants at all parks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetRestaurantsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new restaurant resource
        /// </summary>
        /// <remarks>
        /// Create a new restaurnat resource at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRestaurantAsync (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);

        /// <summary>
        /// Create a new restaurant resource
        /// </summary>
        /// <remarks>
        /// Create a new restaurnat resource at Walt Disney World
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRestaurantAsyncWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);
        /// <summary>
        /// Remove a resource from the restaurants collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the restaurants collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRestaurantAsync ();

        /// <summary>
        /// Remove a resource from the restaurants collection
        /// </summary>
        /// <remarks>
        /// Remove a resource from the restaurants collection by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRestaurantAsyncWithHttpInfo ();
        /// <summary>
        /// Edit a single restaurant resource in the collection by ID
        /// </summary>
        /// <remarks>
        /// Edit a restaurant by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditRestaurantAsync (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);

        /// <summary>
        /// Edit a single restaurant resource in the collection by ID
        /// </summary>
        /// <remarks>
        /// Edit a restaurant by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditRestaurantAsyncWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null);
        /// <summary>
        /// List a single restaurant resource from the collection by ID
        /// </summary>
        /// <remarks>
        /// Get a single restaurant resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetRestaurantAsync ();

        /// <summary>
        /// List a single restaurant resource from the collection by ID
        /// </summary>
        /// <remarks>
        /// Get a single restaurant resource by ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetRestaurantAsyncWithHttpInfo ();
        /// <summary>
        /// List restaurants at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of restaurants at all parks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetRestaurantsAsync ();

        /// <summary>
        /// List restaurants at Walt Disney World
        /// </summary>
        /// <remarks>
        /// Get a list of restaurants at all parks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetRestaurantsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RestaurantsApi : IRestaurantsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RestaurantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestaurantsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestaurantsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RestaurantsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new restaurant resource Create a new restaurnat resource at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns></returns>
        public void CreateRestaurant (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {
             CreateRestaurantWithHttpInfo(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);
        }

        /// <summary>
        /// Create a new restaurant resource Create a new restaurnat resource at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRestaurantWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {

            var localVarPath = "/restaurants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (quickService != null) localVarFormParams.Add("quickService", this.Configuration.ApiClient.ParameterToString(quickService)); // form parameter
            if (tableService != null) localVarFormParams.Add("tableService", this.Configuration.ApiClient.ParameterToString(tableService)); // form parameter
            if (alcohol != null) localVarFormParams.Add("alcohol", this.Configuration.ApiClient.ParameterToString(alcohol)); // form parameter
            if (diningPlan != null) localVarFormParams.Add("diningPlan", this.Configuration.ApiClient.ParameterToString(diningPlan)); // form parameter
            if (mealTypes != null) localVarFormParams.Add("mealTypes", this.Configuration.ApiClient.ParameterToString(mealTypes)); // form parameter
            if (foodTypes != null) localVarFormParams.Add("foodTypes", this.Configuration.ApiClient.ParameterToString(foodTypes)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new restaurant resource Create a new restaurnat resource at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRestaurantAsync (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {
             await CreateRestaurantAsyncWithHttpInfo(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);

        }

        /// <summary>
        /// Create a new restaurant resource Create a new restaurnat resource at Walt Disney World
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRestaurantAsyncWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {

            var localVarPath = "/restaurants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (quickService != null) localVarFormParams.Add("quickService", this.Configuration.ApiClient.ParameterToString(quickService)); // form parameter
            if (tableService != null) localVarFormParams.Add("tableService", this.Configuration.ApiClient.ParameterToString(tableService)); // form parameter
            if (alcohol != null) localVarFormParams.Add("alcohol", this.Configuration.ApiClient.ParameterToString(alcohol)); // form parameter
            if (diningPlan != null) localVarFormParams.Add("diningPlan", this.Configuration.ApiClient.ParameterToString(diningPlan)); // form parameter
            if (mealTypes != null) localVarFormParams.Add("mealTypes", this.Configuration.ApiClient.ParameterToString(mealTypes)); // form parameter
            if (foodTypes != null) localVarFormParams.Add("foodTypes", this.Configuration.ApiClient.ParameterToString(foodTypes)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a resource from the restaurants collection Remove a resource from the restaurants collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteRestaurant ()
        {
             DeleteRestaurantWithHttpInfo();
        }

        /// <summary>
        /// Remove a resource from the restaurants collection Remove a resource from the restaurants collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRestaurantWithHttpInfo ()
        {

            var localVarPath = "/restaurants/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a resource from the restaurants collection Remove a resource from the restaurants collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRestaurantAsync ()
        {
             await DeleteRestaurantAsyncWithHttpInfo();

        }

        /// <summary>
        /// Remove a resource from the restaurants collection Remove a resource from the restaurants collection by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRestaurantAsyncWithHttpInfo ()
        {

            var localVarPath = "/restaurants/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a single restaurant resource in the collection by ID Edit a restaurant by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns></returns>
        public void EditRestaurant (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {
             EditRestaurantWithHttpInfo(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);
        }

        /// <summary>
        /// Edit a single restaurant resource in the collection by ID Edit a restaurant by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EditRestaurantWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {

            var localVarPath = "/restaurants/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (quickService != null) localVarFormParams.Add("quickService", this.Configuration.ApiClient.ParameterToString(quickService)); // form parameter
            if (tableService != null) localVarFormParams.Add("tableService", this.Configuration.ApiClient.ParameterToString(tableService)); // form parameter
            if (alcohol != null) localVarFormParams.Add("alcohol", this.Configuration.ApiClient.ParameterToString(alcohol)); // form parameter
            if (diningPlan != null) localVarFormParams.Add("diningPlan", this.Configuration.ApiClient.ParameterToString(diningPlan)); // form parameter
            if (mealTypes != null) localVarFormParams.Add("mealTypes", this.Configuration.ApiClient.ParameterToString(mealTypes)); // form parameter
            if (foodTypes != null) localVarFormParams.Add("foodTypes", this.Configuration.ApiClient.ParameterToString(foodTypes)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Edit a single restaurant resource in the collection by ID Edit a restaurant by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditRestaurantAsync (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {
             await EditRestaurantAsyncWithHttpInfo(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);

        }

        /// <summary>
        /// Edit a single restaurant resource in the collection by ID Edit a restaurant by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="parkId"> (optional)</param>
        /// <param name="quickService"> (optional)</param>
        /// <param name="tableService"> (optional)</param>
        /// <param name="alcohol"> (optional)</param>
        /// <param name="diningPlan"> (optional)</param>
        /// <param name="mealTypes"> (optional)</param>
        /// <param name="foodTypes"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EditRestaurantAsyncWithHttpInfo (string name = null, int? parkId = null, bool? quickService = null, bool? tableService = null, bool? alcohol = null, bool? diningPlan = null, List<string> mealTypes = null, List<string> foodTypes = null)
        {

            var localVarPath = "/restaurants/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (parkId != null) localVarFormParams.Add("parkId", this.Configuration.ApiClient.ParameterToString(parkId)); // form parameter
            if (quickService != null) localVarFormParams.Add("quickService", this.Configuration.ApiClient.ParameterToString(quickService)); // form parameter
            if (tableService != null) localVarFormParams.Add("tableService", this.Configuration.ApiClient.ParameterToString(tableService)); // form parameter
            if (alcohol != null) localVarFormParams.Add("alcohol", this.Configuration.ApiClient.ParameterToString(alcohol)); // form parameter
            if (diningPlan != null) localVarFormParams.Add("diningPlan", this.Configuration.ApiClient.ParameterToString(diningPlan)); // form parameter
            if (mealTypes != null) localVarFormParams.Add("mealTypes", this.Configuration.ApiClient.ParameterToString(mealTypes)); // form parameter
            if (foodTypes != null) localVarFormParams.Add("foodTypes", this.Configuration.ApiClient.ParameterToString(foodTypes)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List a single restaurant resource from the collection by ID Get a single restaurant resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetRestaurant ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = GetRestaurantWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a single restaurant resource from the collection by ID Get a single restaurant resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > GetRestaurantWithHttpInfo ()
        {

            var localVarPath = "/restaurants/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// List a single restaurant resource from the collection by ID Get a single restaurant resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GetRestaurantAsync ()
        {
             ApiResponse<InlineResponse2005> localVarResponse = await GetRestaurantAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a single restaurant resource from the collection by ID Get a single restaurant resource by ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetRestaurantAsyncWithHttpInfo ()
        {

            var localVarPath = "/restaurants/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestaurant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// List restaurants at Walt Disney World Get a list of restaurants at all parks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetRestaurants ()
        {
             ApiResponse<InlineResponse2004> localVarResponse = GetRestaurantsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List restaurants at Walt Disney World Get a list of restaurants at all parks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > GetRestaurantsWithHttpInfo ()
        {

            var localVarPath = "/restaurants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestaurants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List restaurants at Walt Disney World Get a list of restaurants at all parks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetRestaurantsAsync ()
        {
             ApiResponse<InlineResponse2004> localVarResponse = await GetRestaurantsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List restaurants at Walt Disney World Get a list of restaurants at all parks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetRestaurantsAsyncWithHttpInfo ()
        {

            var localVarPath = "/restaurants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestaurants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

    }
}
