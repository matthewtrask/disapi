/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing RestaurantsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RestaurantsApiTests
    {
        private RestaurantsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RestaurantsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RestaurantsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RestaurantsApi
            //Assert.IsInstanceOfType(typeof(RestaurantsApi), instance, "instance is a RestaurantsApi");
        }

        
        /// <summary>
        /// Test CreateRestaurant
        /// </summary>
        [Test]
        public void CreateRestaurantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? parkId = null;
            //bool? quickService = null;
            //bool? tableService = null;
            //bool? alcohol = null;
            //bool? diningPlan = null;
            //List<string> mealTypes = null;
            //List<string> foodTypes = null;
            //instance.CreateRestaurant(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);
            
        }
        
        /// <summary>
        /// Test DeleteRestaurant
        /// </summary>
        [Test]
        public void DeleteRestaurantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteRestaurant();
            
        }
        
        /// <summary>
        /// Test EditRestaurant
        /// </summary>
        [Test]
        public void EditRestaurantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? parkId = null;
            //bool? quickService = null;
            //bool? tableService = null;
            //bool? alcohol = null;
            //bool? diningPlan = null;
            //List<string> mealTypes = null;
            //List<string> foodTypes = null;
            //instance.EditRestaurant(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);
            
        }
        
        /// <summary>
        /// Test GetRestaurant
        /// </summary>
        [Test]
        public void GetRestaurantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRestaurant();
            //Assert.IsInstanceOf<InlineResponse2005> (response, "response is InlineResponse2005");
        }
        
        /// <summary>
        /// Test GetRestaurants
        /// </summary>
        [Test]
        public void GetRestaurantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRestaurants();
            //Assert.IsInstanceOf<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
    }

}
