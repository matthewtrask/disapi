/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing RidesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RidesApiTests
    {
        private RidesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RidesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RidesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RidesApi
            //Assert.IsInstanceOfType(typeof(RidesApi), instance, "instance is a RidesApi");
        }

        
        /// <summary>
        /// Test CreateRides
        /// </summary>
        [Test]
        public void CreateRidesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? parkId = null;
            //int? openingYear = null;
            //string rideType = null;
            //string rideVehicle = null;
            //bool? interactiveQueue = null;
            //bool? giftStoreFinish = null;
            //int? singleRider = null;
            //int? ridePhoto = null;
            //int? heightRestriction = null;
            //instance.CreateRides(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);
            
        }
        
        /// <summary>
        /// Test DeleteRide
        /// </summary>
        [Test]
        public void DeleteRideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteRide();
            
        }
        
        /// <summary>
        /// Test EditRide
        /// </summary>
        [Test]
        public void EditRideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? parkId = null;
            //int? openingYear = null;
            //string rideType = null;
            //string rideVehicle = null;
            //bool? interactiveQueue = null;
            //bool? giftStoreFinish = null;
            //int? singleRider = null;
            //int? ridePhoto = null;
            //int? heightRestriction = null;
            //instance.EditRide(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);
            
        }
        
        /// <summary>
        /// Test GetRide
        /// </summary>
        [Test]
        public void GetRideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRide();
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test GetRides
        /// </summary>
        [Test]
        public void GetRidesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRides();
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
    }

}
