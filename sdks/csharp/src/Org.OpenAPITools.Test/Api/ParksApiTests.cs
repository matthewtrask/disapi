/* 
 * Walt Disney World API
 *
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ParksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ParksApiTests
    {
        private ParksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ParksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ParksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ParksApi
            //Assert.IsInstanceOfType(typeof(ParksApi), instance, "instance is a ParksApi");
        }

        
        /// <summary>
        /// Test CreatePark
        /// </summary>
        [Test]
        public void CreateParkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string centralAttraction = null;
            //int? yearOpened = null;
            //int? rideCount = null;
            //int? restaurantCount = null;
            //int? resortCount = null;
            //int? size = null;
            //bool? fireworks = null;
            //instance.CreatePark(name, centralAttraction, yearOpened, rideCount, restaurantCount, resortCount, size, fireworks);
            
        }
        
        /// <summary>
        /// Test DeletePark
        /// </summary>
        [Test]
        public void DeleteParkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeletePark();
            
        }
        
        /// <summary>
        /// Test EditPark
        /// </summary>
        [Test]
        public void EditParkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.EditPark();
            
        }
        
        /// <summary>
        /// Test GetPark
        /// </summary>
        [Test]
        public void GetParkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPark();
            //Assert.IsInstanceOf<InlineResponse2007> (response, "response is InlineResponse2007");
        }
        
        /// <summary>
        /// Test GetParks
        /// </summary>
        [Test]
        public void GetParksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetParks();
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }
        
    }

}
