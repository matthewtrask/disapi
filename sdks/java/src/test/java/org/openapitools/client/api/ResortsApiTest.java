/*
 * Walt Disney World API
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResortsApi
 */
@Ignore
public class ResortsApiTest {

    private final ResortsApi api = new ResortsApi();

    
    /**
     * Create a new resort resource
     *
     * Create a new resort resource for the Walt Disney World Resort
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createResortTest() throws ApiException {
        String name = null;
        Integer parkId = null;
        Integer openingYear = null;
        String resortType = null;
        String transportOptions = null;
        String category = null;
        Integer numOfRooms = null;
        Boolean quickServiceRestaurants = null;
        Boolean tableServiceRestaurants = null;
        Boolean giftShop = null;
        Boolean arcade = null;
        Boolean pool = null;
        api.createResort(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);

        // TODO: test validations
    }
    
    /**
     * Delete resort resource by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResortTest() throws ApiException {
        api.deleteResort();

        // TODO: test validations
    }
    
    /**
     * Edit a specific resort resource by ID
     *
     * Find and edit a specific resort resource by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editResortTest() throws ApiException {
        String name = null;
        Integer parkId = null;
        Integer openingYear = null;
        String resortType = null;
        String transportOptions = null;
        String category = null;
        Integer numOfRooms = null;
        Boolean quickServiceRestaurants = null;
        Boolean tableServiceRestaurants = null;
        Boolean giftShop = null;
        Boolean arcade = null;
        Boolean pool = null;
        api.editResort(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);

        // TODO: test validations
    }
    
    /**
     * List a specific resort resource by ID
     *
     * Get a specific resort resource by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResortTest() throws ApiException {
        String name = null;
        Integer parkId = null;
        Integer openingYear = null;
        String resortType = null;
        String transportOptions = null;
        String category = null;
        Integer numOfRooms = null;
        Boolean quickServiceRestaurants = null;
        Boolean tableServiceRestaurants = null;
        Boolean giftShop = null;
        Boolean arcade = null;
        Boolean pool = null;
        InlineResponse2001 response = api.getResort(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);

        // TODO: test validations
    }
    
    /**
     * List resorts at Walt Disney World
     *
     * Get a list of resorts at Walt Disney World
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResortsTest() throws ApiException {
        InlineResponse200 response = api.getResorts();

        // TODO: test validations
    }
    
}
