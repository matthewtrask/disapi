/*
 * Walt Disney World API
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RidesApi
 */
@Ignore
public class RidesApiTest {

    private final RidesApi api = new RidesApi();

    
    /**
     * Create a new ride resource
     *
     * Create a new ride resource for the Walt Disney World Resort
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRidesTest() throws ApiException {
        String name = null;
        Integer parkId = null;
        Integer openingYear = null;
        String rideType = null;
        String rideVehicle = null;
        Boolean interactiveQueue = null;
        Boolean giftStoreFinish = null;
        Integer singleRider = null;
        Integer ridePhoto = null;
        Integer heightRestriction = null;
        api.createRides(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);

        // TODO: test validations
    }
    
    /**
     * Delete ride resource by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRideTest() throws ApiException {
        api.deleteRide();

        // TODO: test validations
    }
    
    /**
     * Edit a ride by ID
     *
     * Edit a ride in the resource collection by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editRideTest() throws ApiException {
        String name = null;
        Integer parkId = null;
        Integer openingYear = null;
        String rideType = null;
        String rideVehicle = null;
        Boolean interactiveQueue = null;
        Boolean giftStoreFinish = null;
        Integer singleRider = null;
        Integer ridePhoto = null;
        Integer heightRestriction = null;
        api.editRide(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);

        // TODO: test validations
    }
    
    /**
     * Get ride by ID
     *
     * Get a ride at Walt Disney World by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRideTest() throws ApiException {
        InlineResponse2003 response = api.getRide();

        // TODO: test validations
    }
    
    /**
     * List rides at Walt Disney World
     *
     * Get a list of rides at all Walt Disney World Parks 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRidesTest() throws ApiException {
        InlineResponse2002 response = api.getRides();

        // TODO: test validations
    }
    
}
