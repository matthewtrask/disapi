/*
 * Walt Disney World API
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.InlineResponse2005;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RestaurantsApi {
    private ApiClient apiClient;

    public RestaurantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RestaurantsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRestaurant
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRestaurantCall(String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/restaurants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (parkId != null)
        localVarFormParams.put("parkId", parkId);
        if (quickService != null)
        localVarFormParams.put("quickService", quickService);
        if (tableService != null)
        localVarFormParams.put("tableService", tableService);
        if (alcohol != null)
        localVarFormParams.put("alcohol", alcohol);
        if (diningPlan != null)
        localVarFormParams.put("diningPlan", diningPlan);
        if (mealTypes != null)
        localVarFormParams.put("mealTypes", mealTypes);
        if (foodTypes != null)
        localVarFormParams.put("foodTypes", foodTypes);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRestaurantValidateBeforeCall(String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createRestaurantCall(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new restaurant resource
     * Create a new restaurnat resource at Walt Disney World
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createRestaurant(String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes) throws ApiException {
        createRestaurantWithHttpInfo(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);
    }

    /**
     * Create a new restaurant resource
     * Create a new restaurnat resource at Walt Disney World
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createRestaurantWithHttpInfo(String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes) throws ApiException {
        com.squareup.okhttp.Call call = createRestaurantValidateBeforeCall(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new restaurant resource (asynchronously)
     * Create a new restaurnat resource at Walt Disney World
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRestaurantAsync(String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRestaurantValidateBeforeCall(name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRestaurant
     * @param id The ID of the restaurant (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRestaurantCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/restaurants/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRestaurantValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRestaurant(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRestaurantCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a resource from the restaurants collection
     * Remove a resource from the restaurants collection by ID
     * @param id The ID of the restaurant (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRestaurant(Integer id) throws ApiException {
        deleteRestaurantWithHttpInfo(id);
    }

    /**
     * Remove a resource from the restaurants collection
     * Remove a resource from the restaurants collection by ID
     * @param id The ID of the restaurant (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRestaurantWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteRestaurantValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a resource from the restaurants collection (asynchronously)
     * Remove a resource from the restaurants collection by ID
     * @param id The ID of the restaurant (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRestaurantAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRestaurantValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editRestaurant
     * @param id The ID of the restaurant (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editRestaurantCall(Integer id, String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/restaurants/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (parkId != null)
        localVarFormParams.put("parkId", parkId);
        if (quickService != null)
        localVarFormParams.put("quickService", quickService);
        if (tableService != null)
        localVarFormParams.put("tableService", tableService);
        if (alcohol != null)
        localVarFormParams.put("alcohol", alcohol);
        if (diningPlan != null)
        localVarFormParams.put("diningPlan", diningPlan);
        if (mealTypes != null)
        localVarFormParams.put("mealTypes", mealTypes);
        if (foodTypes != null)
        localVarFormParams.put("foodTypes", foodTypes);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editRestaurantValidateBeforeCall(Integer id, String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editRestaurant(Async)");
        }
        

        com.squareup.okhttp.Call call = editRestaurantCall(id, name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit a single restaurant resource in the collection by ID
     * Edit a restaurant by ID
     * @param id The ID of the restaurant (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editRestaurant(Integer id, String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes) throws ApiException {
        editRestaurantWithHttpInfo(id, name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes);
    }

    /**
     * Edit a single restaurant resource in the collection by ID
     * Edit a restaurant by ID
     * @param id The ID of the restaurant (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editRestaurantWithHttpInfo(Integer id, String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes) throws ApiException {
        com.squareup.okhttp.Call call = editRestaurantValidateBeforeCall(id, name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit a single restaurant resource in the collection by ID (asynchronously)
     * Edit a restaurant by ID
     * @param id The ID of the restaurant (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param quickService  (optional, default to null)
     * @param tableService  (optional, default to null)
     * @param alcohol  (optional, default to null)
     * @param diningPlan  (optional, default to null)
     * @param mealTypes  (optional, default to null)
     * @param foodTypes  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editRestaurantAsync(Integer id, String name, Integer parkId, Boolean quickService, Boolean tableService, Boolean alcohol, Boolean diningPlan, List<String> mealTypes, List<String> foodTypes, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editRestaurantValidateBeforeCall(id, name, parkId, quickService, tableService, alcohol, diningPlan, mealTypes, foodTypes, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRestaurant
     * @param id The ID of the restaurant (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestaurantCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/restaurants/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestaurantValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRestaurant(Async)");
        }
        

        com.squareup.okhttp.Call call = getRestaurantCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List a single restaurant resource from the collection by ID
     * Get a single restaurant resource by ID
     * @param id The ID of the restaurant (required)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 getRestaurant(Integer id) throws ApiException {
        ApiResponse<InlineResponse2005> resp = getRestaurantWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * List a single restaurant resource from the collection by ID
     * Get a single restaurant resource by ID
     * @param id The ID of the restaurant (required)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> getRestaurantWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getRestaurantValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List a single restaurant resource from the collection by ID (asynchronously)
     * Get a single restaurant resource by ID
     * @param id The ID of the restaurant (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestaurantAsync(Integer id, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestaurantValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestaurants
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestaurantsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/restaurants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestaurantsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getRestaurantsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List restaurants at Walt Disney World
     * Get a list of restaurants at all parks
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getRestaurants() throws ApiException {
        ApiResponse<InlineResponse2004> resp = getRestaurantsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List restaurants at Walt Disney World
     * Get a list of restaurants at all parks
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getRestaurantsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRestaurantsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List restaurants at Walt Disney World (asynchronously)
     * Get a list of restaurants at all parks
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestaurantsAsync(final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestaurantsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
