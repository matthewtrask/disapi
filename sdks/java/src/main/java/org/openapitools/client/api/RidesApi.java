/*
 * Walt Disney World API
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RidesApi {
    private ApiClient apiClient;

    public RidesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RidesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRides
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRidesCall(String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (parkId != null)
        localVarFormParams.put("parkId", parkId);
        if (openingYear != null)
        localVarFormParams.put("openingYear", openingYear);
        if (rideType != null)
        localVarFormParams.put("rideType", rideType);
        if (rideVehicle != null)
        localVarFormParams.put("rideVehicle", rideVehicle);
        if (interactiveQueue != null)
        localVarFormParams.put("interactiveQueue", interactiveQueue);
        if (giftStoreFinish != null)
        localVarFormParams.put("giftStoreFinish", giftStoreFinish);
        if (singleRider != null)
        localVarFormParams.put("singleRider", singleRider);
        if (ridePhoto != null)
        localVarFormParams.put("ridePhoto", ridePhoto);
        if (heightRestriction != null)
        localVarFormParams.put("heightRestriction", heightRestriction);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRidesValidateBeforeCall(String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createRidesCall(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new ride resource
     * Create a new ride resource for the Walt Disney World Resort
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createRides(String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction) throws ApiException {
        createRidesWithHttpInfo(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);
    }

    /**
     * Create a new ride resource
     * Create a new ride resource for the Walt Disney World Resort
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createRidesWithHttpInfo(String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction) throws ApiException {
        com.squareup.okhttp.Call call = createRidesValidateBeforeCall(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new ride resource (asynchronously)
     * Create a new ride resource for the Walt Disney World Resort
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRidesAsync(String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRidesValidateBeforeCall(name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRide
     * @param id The ID of the ride (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRideCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rides/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRideValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRide(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRideCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete ride resource by ID
     * 
     * @param id The ID of the ride (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRide(Integer id) throws ApiException {
        deleteRideWithHttpInfo(id);
    }

    /**
     * Delete ride resource by ID
     * 
     * @param id The ID of the ride (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRideWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteRideValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete ride resource by ID (asynchronously)
     * 
     * @param id The ID of the ride (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRideAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRideValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editRide
     * @param id The ID of the ride (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editRideCall(Integer id, String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rides/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (parkId != null)
        localVarFormParams.put("parkId", parkId);
        if (openingYear != null)
        localVarFormParams.put("openingYear", openingYear);
        if (rideType != null)
        localVarFormParams.put("rideType", rideType);
        if (rideVehicle != null)
        localVarFormParams.put("rideVehicle", rideVehicle);
        if (interactiveQueue != null)
        localVarFormParams.put("interactiveQueue", interactiveQueue);
        if (giftStoreFinish != null)
        localVarFormParams.put("giftStoreFinish", giftStoreFinish);
        if (singleRider != null)
        localVarFormParams.put("singleRider", singleRider);
        if (ridePhoto != null)
        localVarFormParams.put("ridePhoto", ridePhoto);
        if (heightRestriction != null)
        localVarFormParams.put("heightRestriction", heightRestriction);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editRideValidateBeforeCall(Integer id, String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editRide(Async)");
        }
        

        com.squareup.okhttp.Call call = editRideCall(id, name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit a ride by ID
     * Edit a ride in the resource collection by ID
     * @param id The ID of the ride (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editRide(Integer id, String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction) throws ApiException {
        editRideWithHttpInfo(id, name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction);
    }

    /**
     * Edit a ride by ID
     * Edit a ride in the resource collection by ID
     * @param id The ID of the ride (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editRideWithHttpInfo(Integer id, String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction) throws ApiException {
        com.squareup.okhttp.Call call = editRideValidateBeforeCall(id, name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit a ride by ID (asynchronously)
     * Edit a ride in the resource collection by ID
     * @param id The ID of the ride (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param rideType  (optional, default to null)
     * @param rideVehicle  (optional, default to null)
     * @param interactiveQueue  (optional, default to null)
     * @param giftStoreFinish  (optional, default to null)
     * @param singleRider  (optional, default to null)
     * @param ridePhoto  (optional, default to null)
     * @param heightRestriction  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editRideAsync(Integer id, String name, Integer parkId, Integer openingYear, String rideType, String rideVehicle, Boolean interactiveQueue, Boolean giftStoreFinish, Integer singleRider, Integer ridePhoto, Integer heightRestriction, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editRideValidateBeforeCall(id, name, parkId, openingYear, rideType, rideVehicle, interactiveQueue, giftStoreFinish, singleRider, ridePhoto, heightRestriction, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRide
     * @param id The ID of the ride (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRideCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rides/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRideValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRide(Async)");
        }
        

        com.squareup.okhttp.Call call = getRideCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get ride by ID
     * Get a ride at Walt Disney World by ID
     * @param id The ID of the ride (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getRide(Integer id) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getRideWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get ride by ID
     * Get a ride at Walt Disney World by ID
     * @param id The ID of the ride (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getRideWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getRideValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get ride by ID (asynchronously)
     * Get a ride at Walt Disney World by ID
     * @param id The ID of the ride (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRideAsync(Integer id, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRideValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRides
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRidesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/rides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRidesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getRidesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List rides at Walt Disney World
     * Get a list of rides at all Walt Disney World Parks 
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getRides() throws ApiException {
        ApiResponse<InlineResponse2002> resp = getRidesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List rides at Walt Disney World
     * Get a list of rides at all Walt Disney World Parks 
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getRidesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getRidesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List rides at Walt Disney World (asynchronously)
     * Get a list of rides at all Walt Disney World Parks 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRidesAsync(final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRidesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
