/*
 * Walt Disney World API
 * An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@disapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResortsApi {
    private ApiClient apiClient;

    public ResortsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResortsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createResort
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createResortCall(String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (parkId != null)
        localVarFormParams.put("parkId", parkId);
        if (openingYear != null)
        localVarFormParams.put("openingYear", openingYear);
        if (resortType != null)
        localVarFormParams.put("resortType", resortType);
        if (transportOptions != null)
        localVarFormParams.put("transportOptions", transportOptions);
        if (category != null)
        localVarFormParams.put("category", category);
        if (numOfRooms != null)
        localVarFormParams.put("numOfRooms", numOfRooms);
        if (quickServiceRestaurants != null)
        localVarFormParams.put("quickServiceRestaurants", quickServiceRestaurants);
        if (tableServiceRestaurants != null)
        localVarFormParams.put("tableServiceRestaurants", tableServiceRestaurants);
        if (giftShop != null)
        localVarFormParams.put("giftShop", giftShop);
        if (arcade != null)
        localVarFormParams.put("arcade", arcade);
        if (pool != null)
        localVarFormParams.put("pool", pool);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createResortValidateBeforeCall(String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createResortCall(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new resort resource
     * Create a new resort resource for the Walt Disney World Resort
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createResort(String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool) throws ApiException {
        createResortWithHttpInfo(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);
    }

    /**
     * Create a new resort resource
     * Create a new resort resource for the Walt Disney World Resort
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createResortWithHttpInfo(String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool) throws ApiException {
        com.squareup.okhttp.Call call = createResortValidateBeforeCall(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new resort resource (asynchronously)
     * Create a new resort resource for the Walt Disney World Resort
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createResortAsync(String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createResortValidateBeforeCall(name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteResort
     * @param id The ID of the resort (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteResortCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resorts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteResortValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteResort(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteResortCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete resort resource by ID
     * 
     * @param id The ID of the resort (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteResort(Integer id) throws ApiException {
        deleteResortWithHttpInfo(id);
    }

    /**
     * Delete resort resource by ID
     * 
     * @param id The ID of the resort (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteResortWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteResortValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete resort resource by ID (asynchronously)
     * 
     * @param id The ID of the resort (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResortAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResortValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editResort
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editResortCall(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resorts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (parkId != null)
        localVarFormParams.put("parkId", parkId);
        if (openingYear != null)
        localVarFormParams.put("openingYear", openingYear);
        if (resortType != null)
        localVarFormParams.put("resortType", resortType);
        if (transportOptions != null)
        localVarFormParams.put("transportOptions", transportOptions);
        if (category != null)
        localVarFormParams.put("category", category);
        if (numOfRooms != null)
        localVarFormParams.put("numOfRooms", numOfRooms);
        if (quickServiceRestaurants != null)
        localVarFormParams.put("quickServiceRestaurants", quickServiceRestaurants);
        if (tableServiceRestaurants != null)
        localVarFormParams.put("tableServiceRestaurants", tableServiceRestaurants);
        if (giftShop != null)
        localVarFormParams.put("giftShop", giftShop);
        if (arcade != null)
        localVarFormParams.put("arcade", arcade);
        if (pool != null)
        localVarFormParams.put("pool", pool);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editResortValidateBeforeCall(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editResort(Async)");
        }
        

        com.squareup.okhttp.Call call = editResortCall(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Edit a specific resort resource by ID
     * Find and edit a specific resort resource by its ID
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editResort(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool) throws ApiException {
        editResortWithHttpInfo(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);
    }

    /**
     * Edit a specific resort resource by ID
     * Find and edit a specific resort resource by its ID
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editResortWithHttpInfo(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool) throws ApiException {
        com.squareup.okhttp.Call call = editResortValidateBeforeCall(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit a specific resort resource by ID (asynchronously)
     * Find and edit a specific resort resource by its ID
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editResortAsync(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editResortValidateBeforeCall(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getResort
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResortCall(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resorts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (parkId != null)
        localVarFormParams.put("parkId", parkId);
        if (openingYear != null)
        localVarFormParams.put("openingYear", openingYear);
        if (resortType != null)
        localVarFormParams.put("resortType", resortType);
        if (transportOptions != null)
        localVarFormParams.put("transportOptions", transportOptions);
        if (category != null)
        localVarFormParams.put("category", category);
        if (numOfRooms != null)
        localVarFormParams.put("numOfRooms", numOfRooms);
        if (quickServiceRestaurants != null)
        localVarFormParams.put("quickServiceRestaurants", quickServiceRestaurants);
        if (tableServiceRestaurants != null)
        localVarFormParams.put("tableServiceRestaurants", tableServiceRestaurants);
        if (giftShop != null)
        localVarFormParams.put("giftShop", giftShop);
        if (arcade != null)
        localVarFormParams.put("arcade", arcade);
        if (pool != null)
        localVarFormParams.put("pool", pool);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResortValidateBeforeCall(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResort(Async)");
        }
        

        com.squareup.okhttp.Call call = getResortCall(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List a specific resort resource by ID
     * Get a specific resort resource by ID
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getResort(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getResortWithHttpInfo(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool);
        return resp.getData();
    }

    /**
     * List a specific resort resource by ID
     * Get a specific resort resource by ID
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getResortWithHttpInfo(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool) throws ApiException {
        com.squareup.okhttp.Call call = getResortValidateBeforeCall(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List a specific resort resource by ID (asynchronously)
     * Get a specific resort resource by ID
     * @param id The ID of the resort (required)
     * @param name  (optional, default to null)
     * @param parkId  (optional, default to null)
     * @param openingYear  (optional, default to null)
     * @param resortType  (optional, default to null)
     * @param transportOptions  (optional, default to null)
     * @param category  (optional, default to null)
     * @param numOfRooms  (optional, default to null)
     * @param quickServiceRestaurants  (optional, default to null)
     * @param tableServiceRestaurants  (optional, default to null)
     * @param giftShop  (optional, default to null)
     * @param arcade  (optional, default to null)
     * @param pool  (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResortAsync(Integer id, String name, Integer parkId, Integer openingYear, String resortType, String transportOptions, String category, Integer numOfRooms, Boolean quickServiceRestaurants, Boolean tableServiceRestaurants, Boolean giftShop, Boolean arcade, Boolean pool, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResortValidateBeforeCall(id, name, parkId, openingYear, resortType, transportOptions, category, numOfRooms, quickServiceRestaurants, tableServiceRestaurants, giftShop, arcade, pool, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResorts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResortsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/resorts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResortsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getResortsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List resorts at Walt Disney World
     * Get a list of resorts at Walt Disney World
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 getResorts() throws ApiException {
        ApiResponse<InlineResponse200> resp = getResortsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List resorts at Walt Disney World
     * Get a list of resorts at Walt Disney World
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> getResortsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getResortsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List resorts at Walt Disney World (asynchronously)
     * Get a list of resorts at Walt Disney World
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResortsAsync(final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResortsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
