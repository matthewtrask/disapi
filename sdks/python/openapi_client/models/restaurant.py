# coding: utf-8

"""
    Walt Disney World API

    An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: support@disapi.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Restaurant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'quick_service': 'bool',
        'table_service': 'bool',
        'alcohol': 'bool',
        'dining_plan': 'bool',
        'meal_types': 'list[str]',
        'food_types': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'quick_service': 'quickService',
        'table_service': 'tableService',
        'alcohol': 'alcohol',
        'dining_plan': 'diningPlan',
        'meal_types': 'mealTypes',
        'food_types': 'foodTypes'
    }

    def __init__(self, id=None, name=None, quick_service=None, table_service=None, alcohol=None, dining_plan=None, meal_types=None, food_types=None):  # noqa: E501
        """Restaurant - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._quick_service = None
        self._table_service = None
        self._alcohol = None
        self._dining_plan = None
        self._meal_types = None
        self._food_types = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if quick_service is not None:
            self.quick_service = quick_service
        if table_service is not None:
            self.table_service = table_service
        if alcohol is not None:
            self.alcohol = alcohol
        if dining_plan is not None:
            self.dining_plan = dining_plan
        if meal_types is not None:
            self.meal_types = meal_types
        if food_types is not None:
            self.food_types = food_types

    @property
    def id(self):
        """Gets the id of this Restaurant.  # noqa: E501


        :return: The id of this Restaurant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Restaurant.


        :param id: The id of this Restaurant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Restaurant.  # noqa: E501


        :return: The name of this Restaurant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Restaurant.


        :param name: The name of this Restaurant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def quick_service(self):
        """Gets the quick_service of this Restaurant.  # noqa: E501


        :return: The quick_service of this Restaurant.  # noqa: E501
        :rtype: bool
        """
        return self._quick_service

    @quick_service.setter
    def quick_service(self, quick_service):
        """Sets the quick_service of this Restaurant.


        :param quick_service: The quick_service of this Restaurant.  # noqa: E501
        :type: bool
        """

        self._quick_service = quick_service

    @property
    def table_service(self):
        """Gets the table_service of this Restaurant.  # noqa: E501


        :return: The table_service of this Restaurant.  # noqa: E501
        :rtype: bool
        """
        return self._table_service

    @table_service.setter
    def table_service(self, table_service):
        """Sets the table_service of this Restaurant.


        :param table_service: The table_service of this Restaurant.  # noqa: E501
        :type: bool
        """

        self._table_service = table_service

    @property
    def alcohol(self):
        """Gets the alcohol of this Restaurant.  # noqa: E501


        :return: The alcohol of this Restaurant.  # noqa: E501
        :rtype: bool
        """
        return self._alcohol

    @alcohol.setter
    def alcohol(self, alcohol):
        """Sets the alcohol of this Restaurant.


        :param alcohol: The alcohol of this Restaurant.  # noqa: E501
        :type: bool
        """

        self._alcohol = alcohol

    @property
    def dining_plan(self):
        """Gets the dining_plan of this Restaurant.  # noqa: E501


        :return: The dining_plan of this Restaurant.  # noqa: E501
        :rtype: bool
        """
        return self._dining_plan

    @dining_plan.setter
    def dining_plan(self, dining_plan):
        """Sets the dining_plan of this Restaurant.


        :param dining_plan: The dining_plan of this Restaurant.  # noqa: E501
        :type: bool
        """

        self._dining_plan = dining_plan

    @property
    def meal_types(self):
        """Gets the meal_types of this Restaurant.  # noqa: E501


        :return: The meal_types of this Restaurant.  # noqa: E501
        :rtype: list[str]
        """
        return self._meal_types

    @meal_types.setter
    def meal_types(self, meal_types):
        """Sets the meal_types of this Restaurant.


        :param meal_types: The meal_types of this Restaurant.  # noqa: E501
        :type: list[str]
        """

        self._meal_types = meal_types

    @property
    def food_types(self):
        """Gets the food_types of this Restaurant.  # noqa: E501


        :return: The food_types of this Restaurant.  # noqa: E501
        :rtype: list[str]
        """
        return self._food_types

    @food_types.setter
    def food_types(self, food_types):
        """Sets the food_types of this Restaurant.


        :param food_types: The food_types of this Restaurant.  # noqa: E501
        :type: list[str]
        """

        self._food_types = food_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Restaurant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
