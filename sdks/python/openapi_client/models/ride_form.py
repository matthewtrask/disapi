# coding: utf-8

"""
    Walt Disney World API

    An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: support@disapi.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RideForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'park_id': 'int',
        'opening_year': 'int',
        'ride_type': 'str',
        'ride_vehicle': 'str',
        'interactive_queue': 'bool',
        'gift_store_finish': 'bool',
        'single_rider': 'int',
        'ride_photo': 'int',
        'height_restriction': 'int'
    }

    attribute_map = {
        'name': 'name',
        'park_id': 'parkId',
        'opening_year': 'openingYear',
        'ride_type': 'rideType',
        'ride_vehicle': 'rideVehicle',
        'interactive_queue': 'interactiveQueue',
        'gift_store_finish': 'giftStoreFinish',
        'single_rider': 'singleRider',
        'ride_photo': 'ridePhoto',
        'height_restriction': 'heightRestriction'
    }

    def __init__(self, name=None, park_id=None, opening_year=None, ride_type=None, ride_vehicle=None, interactive_queue=None, gift_store_finish=None, single_rider=None, ride_photo=None, height_restriction=None):  # noqa: E501
        """RideForm - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._park_id = None
        self._opening_year = None
        self._ride_type = None
        self._ride_vehicle = None
        self._interactive_queue = None
        self._gift_store_finish = None
        self._single_rider = None
        self._ride_photo = None
        self._height_restriction = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if park_id is not None:
            self.park_id = park_id
        if opening_year is not None:
            self.opening_year = opening_year
        if ride_type is not None:
            self.ride_type = ride_type
        if ride_vehicle is not None:
            self.ride_vehicle = ride_vehicle
        if interactive_queue is not None:
            self.interactive_queue = interactive_queue
        if gift_store_finish is not None:
            self.gift_store_finish = gift_store_finish
        if single_rider is not None:
            self.single_rider = single_rider
        if ride_photo is not None:
            self.ride_photo = ride_photo
        if height_restriction is not None:
            self.height_restriction = height_restriction

    @property
    def name(self):
        """Gets the name of this RideForm.  # noqa: E501


        :return: The name of this RideForm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RideForm.


        :param name: The name of this RideForm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def park_id(self):
        """Gets the park_id of this RideForm.  # noqa: E501


        :return: The park_id of this RideForm.  # noqa: E501
        :rtype: int
        """
        return self._park_id

    @park_id.setter
    def park_id(self, park_id):
        """Sets the park_id of this RideForm.


        :param park_id: The park_id of this RideForm.  # noqa: E501
        :type: int
        """

        self._park_id = park_id

    @property
    def opening_year(self):
        """Gets the opening_year of this RideForm.  # noqa: E501


        :return: The opening_year of this RideForm.  # noqa: E501
        :rtype: int
        """
        return self._opening_year

    @opening_year.setter
    def opening_year(self, opening_year):
        """Sets the opening_year of this RideForm.


        :param opening_year: The opening_year of this RideForm.  # noqa: E501
        :type: int
        """

        self._opening_year = opening_year

    @property
    def ride_type(self):
        """Gets the ride_type of this RideForm.  # noqa: E501


        :return: The ride_type of this RideForm.  # noqa: E501
        :rtype: str
        """
        return self._ride_type

    @ride_type.setter
    def ride_type(self, ride_type):
        """Sets the ride_type of this RideForm.


        :param ride_type: The ride_type of this RideForm.  # noqa: E501
        :type: str
        """

        self._ride_type = ride_type

    @property
    def ride_vehicle(self):
        """Gets the ride_vehicle of this RideForm.  # noqa: E501


        :return: The ride_vehicle of this RideForm.  # noqa: E501
        :rtype: str
        """
        return self._ride_vehicle

    @ride_vehicle.setter
    def ride_vehicle(self, ride_vehicle):
        """Sets the ride_vehicle of this RideForm.


        :param ride_vehicle: The ride_vehicle of this RideForm.  # noqa: E501
        :type: str
        """

        self._ride_vehicle = ride_vehicle

    @property
    def interactive_queue(self):
        """Gets the interactive_queue of this RideForm.  # noqa: E501


        :return: The interactive_queue of this RideForm.  # noqa: E501
        :rtype: bool
        """
        return self._interactive_queue

    @interactive_queue.setter
    def interactive_queue(self, interactive_queue):
        """Sets the interactive_queue of this RideForm.


        :param interactive_queue: The interactive_queue of this RideForm.  # noqa: E501
        :type: bool
        """

        self._interactive_queue = interactive_queue

    @property
    def gift_store_finish(self):
        """Gets the gift_store_finish of this RideForm.  # noqa: E501


        :return: The gift_store_finish of this RideForm.  # noqa: E501
        :rtype: bool
        """
        return self._gift_store_finish

    @gift_store_finish.setter
    def gift_store_finish(self, gift_store_finish):
        """Sets the gift_store_finish of this RideForm.


        :param gift_store_finish: The gift_store_finish of this RideForm.  # noqa: E501
        :type: bool
        """

        self._gift_store_finish = gift_store_finish

    @property
    def single_rider(self):
        """Gets the single_rider of this RideForm.  # noqa: E501


        :return: The single_rider of this RideForm.  # noqa: E501
        :rtype: int
        """
        return self._single_rider

    @single_rider.setter
    def single_rider(self, single_rider):
        """Sets the single_rider of this RideForm.


        :param single_rider: The single_rider of this RideForm.  # noqa: E501
        :type: int
        """

        self._single_rider = single_rider

    @property
    def ride_photo(self):
        """Gets the ride_photo of this RideForm.  # noqa: E501


        :return: The ride_photo of this RideForm.  # noqa: E501
        :rtype: int
        """
        return self._ride_photo

    @ride_photo.setter
    def ride_photo(self, ride_photo):
        """Sets the ride_photo of this RideForm.


        :param ride_photo: The ride_photo of this RideForm.  # noqa: E501
        :type: int
        """

        self._ride_photo = ride_photo

    @property
    def height_restriction(self):
        """Gets the height_restriction of this RideForm.  # noqa: E501


        :return: The height_restriction of this RideForm.  # noqa: E501
        :rtype: int
        """
        return self._height_restriction

    @height_restriction.setter
    def height_restriction(self, height_restriction):
        """Sets the height_restriction of this RideForm.


        :param height_restriction: The height_restriction of this RideForm.  # noqa: E501
        :type: int
        """

        self._height_restriction = height_restriction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RideForm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
