# coding: utf-8

"""
    Walt Disney World API

    An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: support@disapi.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ResortForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'park_id': 'int',
        'opening_year': 'int',
        'resort_type': 'str',
        'transport_options': 'str',
        'category': 'str',
        'num_of_rooms': 'int',
        'quick_service_restaurants': 'bool',
        'table_service_restaurants': 'bool',
        'gift_shop': 'bool',
        'arcade': 'bool',
        'pool': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'park_id': 'parkId',
        'opening_year': 'openingYear',
        'resort_type': 'resortType',
        'transport_options': 'transportOptions',
        'category': 'category',
        'num_of_rooms': 'numOfRooms',
        'quick_service_restaurants': 'quickServiceRestaurants',
        'table_service_restaurants': 'tableServiceRestaurants',
        'gift_shop': 'giftShop',
        'arcade': 'arcade',
        'pool': 'pool'
    }

    def __init__(self, name=None, park_id=None, opening_year=None, resort_type=None, transport_options=None, category=None, num_of_rooms=None, quick_service_restaurants=None, table_service_restaurants=None, gift_shop=None, arcade=None, pool=None):  # noqa: E501
        """ResortForm - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._park_id = None
        self._opening_year = None
        self._resort_type = None
        self._transport_options = None
        self._category = None
        self._num_of_rooms = None
        self._quick_service_restaurants = None
        self._table_service_restaurants = None
        self._gift_shop = None
        self._arcade = None
        self._pool = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if park_id is not None:
            self.park_id = park_id
        if opening_year is not None:
            self.opening_year = opening_year
        if resort_type is not None:
            self.resort_type = resort_type
        if transport_options is not None:
            self.transport_options = transport_options
        if category is not None:
            self.category = category
        if num_of_rooms is not None:
            self.num_of_rooms = num_of_rooms
        if quick_service_restaurants is not None:
            self.quick_service_restaurants = quick_service_restaurants
        if table_service_restaurants is not None:
            self.table_service_restaurants = table_service_restaurants
        if gift_shop is not None:
            self.gift_shop = gift_shop
        if arcade is not None:
            self.arcade = arcade
        if pool is not None:
            self.pool = pool

    @property
    def name(self):
        """Gets the name of this ResortForm.  # noqa: E501


        :return: The name of this ResortForm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResortForm.


        :param name: The name of this ResortForm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def park_id(self):
        """Gets the park_id of this ResortForm.  # noqa: E501


        :return: The park_id of this ResortForm.  # noqa: E501
        :rtype: int
        """
        return self._park_id

    @park_id.setter
    def park_id(self, park_id):
        """Sets the park_id of this ResortForm.


        :param park_id: The park_id of this ResortForm.  # noqa: E501
        :type: int
        """

        self._park_id = park_id

    @property
    def opening_year(self):
        """Gets the opening_year of this ResortForm.  # noqa: E501


        :return: The opening_year of this ResortForm.  # noqa: E501
        :rtype: int
        """
        return self._opening_year

    @opening_year.setter
    def opening_year(self, opening_year):
        """Sets the opening_year of this ResortForm.


        :param opening_year: The opening_year of this ResortForm.  # noqa: E501
        :type: int
        """

        self._opening_year = opening_year

    @property
    def resort_type(self):
        """Gets the resort_type of this ResortForm.  # noqa: E501


        :return: The resort_type of this ResortForm.  # noqa: E501
        :rtype: str
        """
        return self._resort_type

    @resort_type.setter
    def resort_type(self, resort_type):
        """Sets the resort_type of this ResortForm.


        :param resort_type: The resort_type of this ResortForm.  # noqa: E501
        :type: str
        """

        self._resort_type = resort_type

    @property
    def transport_options(self):
        """Gets the transport_options of this ResortForm.  # noqa: E501


        :return: The transport_options of this ResortForm.  # noqa: E501
        :rtype: str
        """
        return self._transport_options

    @transport_options.setter
    def transport_options(self, transport_options):
        """Sets the transport_options of this ResortForm.


        :param transport_options: The transport_options of this ResortForm.  # noqa: E501
        :type: str
        """

        self._transport_options = transport_options

    @property
    def category(self):
        """Gets the category of this ResortForm.  # noqa: E501


        :return: The category of this ResortForm.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ResortForm.


        :param category: The category of this ResortForm.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def num_of_rooms(self):
        """Gets the num_of_rooms of this ResortForm.  # noqa: E501


        :return: The num_of_rooms of this ResortForm.  # noqa: E501
        :rtype: int
        """
        return self._num_of_rooms

    @num_of_rooms.setter
    def num_of_rooms(self, num_of_rooms):
        """Sets the num_of_rooms of this ResortForm.


        :param num_of_rooms: The num_of_rooms of this ResortForm.  # noqa: E501
        :type: int
        """

        self._num_of_rooms = num_of_rooms

    @property
    def quick_service_restaurants(self):
        """Gets the quick_service_restaurants of this ResortForm.  # noqa: E501


        :return: The quick_service_restaurants of this ResortForm.  # noqa: E501
        :rtype: bool
        """
        return self._quick_service_restaurants

    @quick_service_restaurants.setter
    def quick_service_restaurants(self, quick_service_restaurants):
        """Sets the quick_service_restaurants of this ResortForm.


        :param quick_service_restaurants: The quick_service_restaurants of this ResortForm.  # noqa: E501
        :type: bool
        """

        self._quick_service_restaurants = quick_service_restaurants

    @property
    def table_service_restaurants(self):
        """Gets the table_service_restaurants of this ResortForm.  # noqa: E501


        :return: The table_service_restaurants of this ResortForm.  # noqa: E501
        :rtype: bool
        """
        return self._table_service_restaurants

    @table_service_restaurants.setter
    def table_service_restaurants(self, table_service_restaurants):
        """Sets the table_service_restaurants of this ResortForm.


        :param table_service_restaurants: The table_service_restaurants of this ResortForm.  # noqa: E501
        :type: bool
        """

        self._table_service_restaurants = table_service_restaurants

    @property
    def gift_shop(self):
        """Gets the gift_shop of this ResortForm.  # noqa: E501


        :return: The gift_shop of this ResortForm.  # noqa: E501
        :rtype: bool
        """
        return self._gift_shop

    @gift_shop.setter
    def gift_shop(self, gift_shop):
        """Sets the gift_shop of this ResortForm.


        :param gift_shop: The gift_shop of this ResortForm.  # noqa: E501
        :type: bool
        """

        self._gift_shop = gift_shop

    @property
    def arcade(self):
        """Gets the arcade of this ResortForm.  # noqa: E501


        :return: The arcade of this ResortForm.  # noqa: E501
        :rtype: bool
        """
        return self._arcade

    @arcade.setter
    def arcade(self, arcade):
        """Sets the arcade of this ResortForm.


        :param arcade: The arcade of this ResortForm.  # noqa: E501
        :type: bool
        """

        self._arcade = arcade

    @property
    def pool(self):
        """Gets the pool of this ResortForm.  # noqa: E501


        :return: The pool of this ResortForm.  # noqa: E501
        :rtype: bool
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this ResortForm.


        :param pool: The pool of this ResortForm.  # noqa: E501
        :type: bool
        """

        self._pool = pool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResortForm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
