# coding: utf-8

"""
    Walt Disney World API

    An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: support@disapi.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Park(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'central_attraction': 'str',
        'year_opened': 'str',
        'ride_count': 'int',
        'restaurant_count': 'int',
        'size': 'int',
        'resort_count': 'int',
        'fireworks': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'central_attraction': 'centralAttraction',
        'year_opened': 'yearOpened',
        'ride_count': 'rideCount',
        'restaurant_count': 'restaurantCount',
        'size': 'size',
        'resort_count': 'resortCount',
        'fireworks': 'fireworks'
    }

    def __init__(self, id=None, name=None, central_attraction=None, year_opened=None, ride_count=None, restaurant_count=None, size=None, resort_count=None, fireworks=None):  # noqa: E501
        """Park - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._central_attraction = None
        self._year_opened = None
        self._ride_count = None
        self._restaurant_count = None
        self._size = None
        self._resort_count = None
        self._fireworks = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if central_attraction is not None:
            self.central_attraction = central_attraction
        if year_opened is not None:
            self.year_opened = year_opened
        if ride_count is not None:
            self.ride_count = ride_count
        if restaurant_count is not None:
            self.restaurant_count = restaurant_count
        if size is not None:
            self.size = size
        if resort_count is not None:
            self.resort_count = resort_count
        if fireworks is not None:
            self.fireworks = fireworks

    @property
    def id(self):
        """Gets the id of this Park.  # noqa: E501


        :return: The id of this Park.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Park.


        :param id: The id of this Park.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Park.  # noqa: E501


        :return: The name of this Park.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Park.


        :param name: The name of this Park.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def central_attraction(self):
        """Gets the central_attraction of this Park.  # noqa: E501


        :return: The central_attraction of this Park.  # noqa: E501
        :rtype: str
        """
        return self._central_attraction

    @central_attraction.setter
    def central_attraction(self, central_attraction):
        """Sets the central_attraction of this Park.


        :param central_attraction: The central_attraction of this Park.  # noqa: E501
        :type: str
        """

        self._central_attraction = central_attraction

    @property
    def year_opened(self):
        """Gets the year_opened of this Park.  # noqa: E501


        :return: The year_opened of this Park.  # noqa: E501
        :rtype: str
        """
        return self._year_opened

    @year_opened.setter
    def year_opened(self, year_opened):
        """Sets the year_opened of this Park.


        :param year_opened: The year_opened of this Park.  # noqa: E501
        :type: str
        """

        self._year_opened = year_opened

    @property
    def ride_count(self):
        """Gets the ride_count of this Park.  # noqa: E501


        :return: The ride_count of this Park.  # noqa: E501
        :rtype: int
        """
        return self._ride_count

    @ride_count.setter
    def ride_count(self, ride_count):
        """Sets the ride_count of this Park.


        :param ride_count: The ride_count of this Park.  # noqa: E501
        :type: int
        """

        self._ride_count = ride_count

    @property
    def restaurant_count(self):
        """Gets the restaurant_count of this Park.  # noqa: E501


        :return: The restaurant_count of this Park.  # noqa: E501
        :rtype: int
        """
        return self._restaurant_count

    @restaurant_count.setter
    def restaurant_count(self, restaurant_count):
        """Sets the restaurant_count of this Park.


        :param restaurant_count: The restaurant_count of this Park.  # noqa: E501
        :type: int
        """

        self._restaurant_count = restaurant_count

    @property
    def size(self):
        """Gets the size of this Park.  # noqa: E501


        :return: The size of this Park.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Park.


        :param size: The size of this Park.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def resort_count(self):
        """Gets the resort_count of this Park.  # noqa: E501


        :return: The resort_count of this Park.  # noqa: E501
        :rtype: int
        """
        return self._resort_count

    @resort_count.setter
    def resort_count(self, resort_count):
        """Sets the resort_count of this Park.


        :param resort_count: The resort_count of this Park.  # noqa: E501
        :type: int
        """

        self._resort_count = resort_count

    @property
    def fireworks(self):
        """Gets the fireworks of this Park.  # noqa: E501


        :return: The fireworks of this Park.  # noqa: E501
        :rtype: bool
        """
        return self._fireworks

    @fireworks.setter
    def fireworks(self, fireworks):
        """Sets the fireworks of this Park.


        :param fireworks: The fireworks of this Park.  # noqa: E501
        :type: bool
        """

        self._fireworks = fireworks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Park):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
