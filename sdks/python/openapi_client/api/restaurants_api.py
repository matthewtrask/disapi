# coding: utf-8

"""
    Walt Disney World API

    An api that encompasses the Walt Disney World Resort parks, rides, resorts, and restaurants. This API follows the OpenAPI standard.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: support@disapi.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class RestaurantsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_restaurant(self, **kwargs):  # noqa: E501
        """Create a new restaurant resource  # noqa: E501

        Create a new restaurnat resource at Walt Disney World  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_restaurant(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param int park_id:
        :param bool quick_service:
        :param bool table_service:
        :param bool alcohol:
        :param bool dining_plan:
        :param list[str] meal_types:
        :param list[str] food_types:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_restaurant_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_restaurant_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_restaurant_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new restaurant resource  # noqa: E501

        Create a new restaurnat resource at Walt Disney World  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_restaurant_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param int park_id:
        :param bool quick_service:
        :param bool table_service:
        :param bool alcohol:
        :param bool dining_plan:
        :param list[str] meal_types:
        :param list[str] food_types:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'park_id', 'quick_service', 'table_service', 'alcohol', 'dining_plan', 'meal_types', 'food_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_restaurant" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'park_id' in local_var_params:
            form_params.append(('parkId', local_var_params['park_id']))  # noqa: E501
        if 'quick_service' in local_var_params:
            form_params.append(('quickService', local_var_params['quick_service']))  # noqa: E501
        if 'table_service' in local_var_params:
            form_params.append(('tableService', local_var_params['table_service']))  # noqa: E501
        if 'alcohol' in local_var_params:
            form_params.append(('alcohol', local_var_params['alcohol']))  # noqa: E501
        if 'dining_plan' in local_var_params:
            form_params.append(('diningPlan', local_var_params['dining_plan']))  # noqa: E501
        if 'meal_types' in local_var_params:
            form_params.append(('mealTypes', local_var_params['meal_types']))  # noqa: E501
            collection_formats['mealTypes'] = 'csv'  # noqa: E501
        if 'food_types' in local_var_params:
            form_params.append(('foodTypes', local_var_params['food_types']))  # noqa: E501
            collection_formats['foodTypes'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/restaurants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_restaurant(self, id, **kwargs):  # noqa: E501
        """Remove a resource from the restaurants collection  # noqa: E501

        Remove a resource from the restaurants collection by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_restaurant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the restaurant (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_restaurant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_restaurant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_restaurant_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove a resource from the restaurants collection  # noqa: E501

        Remove a resource from the restaurants collection by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_restaurant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the restaurant (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_restaurant" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_restaurant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/restaurants/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_restaurant(self, id, **kwargs):  # noqa: E501
        """Edit a single restaurant resource in the collection by ID  # noqa: E501

        Edit a restaurant by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_restaurant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the restaurant (required)
        :param str name:
        :param int park_id:
        :param bool quick_service:
        :param bool table_service:
        :param bool alcohol:
        :param bool dining_plan:
        :param list[str] meal_types:
        :param list[str] food_types:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_restaurant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_restaurant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def edit_restaurant_with_http_info(self, id, **kwargs):  # noqa: E501
        """Edit a single restaurant resource in the collection by ID  # noqa: E501

        Edit a restaurant by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_restaurant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the restaurant (required)
        :param str name:
        :param int park_id:
        :param bool quick_service:
        :param bool table_service:
        :param bool alcohol:
        :param bool dining_plan:
        :param list[str] meal_types:
        :param list[str] food_types:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'name', 'park_id', 'quick_service', 'table_service', 'alcohol', 'dining_plan', 'meal_types', 'food_types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_restaurant" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `edit_restaurant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in local_var_params:
            form_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'park_id' in local_var_params:
            form_params.append(('parkId', local_var_params['park_id']))  # noqa: E501
        if 'quick_service' in local_var_params:
            form_params.append(('quickService', local_var_params['quick_service']))  # noqa: E501
        if 'table_service' in local_var_params:
            form_params.append(('tableService', local_var_params['table_service']))  # noqa: E501
        if 'alcohol' in local_var_params:
            form_params.append(('alcohol', local_var_params['alcohol']))  # noqa: E501
        if 'dining_plan' in local_var_params:
            form_params.append(('diningPlan', local_var_params['dining_plan']))  # noqa: E501
        if 'meal_types' in local_var_params:
            form_params.append(('mealTypes', local_var_params['meal_types']))  # noqa: E501
            collection_formats['mealTypes'] = 'csv'  # noqa: E501
        if 'food_types' in local_var_params:
            form_params.append(('foodTypes', local_var_params['food_types']))  # noqa: E501
            collection_formats['foodTypes'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/restaurants/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_restaurant(self, id, **kwargs):  # noqa: E501
        """List a single restaurant resource from the collection by ID  # noqa: E501

        Get a single restaurant resource by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_restaurant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the restaurant (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_restaurant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_restaurant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_restaurant_with_http_info(self, id, **kwargs):  # noqa: E501
        """List a single restaurant resource from the collection by ID  # noqa: E501

        Get a single restaurant resource by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_restaurant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the restaurant (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_restaurant" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_restaurant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/restaurants/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_restaurants(self, **kwargs):  # noqa: E501
        """List restaurants at Walt Disney World  # noqa: E501

        Get a list of restaurants at all parks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_restaurants(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_restaurants_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_restaurants_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_restaurants_with_http_info(self, **kwargs):  # noqa: E501
        """List restaurants at Walt Disney World  # noqa: E501

        Get a list of restaurants at all parks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_restaurants_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_restaurants" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/restaurants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
